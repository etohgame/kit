"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2036],{90384:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"client-objects/ziplines","title":"Ziplines","description":"Ziplines carry attached objects allowed via a TouchConfiguration along a set path. A Zipline is a Model that contains a ZiplineConfiguration, a Folder called Points, and a BasePart called MountPart. The zipline will always try to keep attached objects upright.","source":"@site/docs/client-objects/ziplines.md","sourceDirName":"client-objects","slug":"/client-objects/ziplines","permalink":"/kit/docs/client-objects/ziplines","draft":false,"unlisted":false,"editUrl":"https://github.com/etohgame/kit/edit/main/docs/client-objects/ziplines.md","tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Vines","permalink":"/kit/docs/client-objects/vines"},"next":{"title":"TouchConfiguration","permalink":"/kit/docs/global-configurations/touch-configurations"}}');var s=n(74848),l=n(28453);const c={},d="Ziplines",r={},o=[{value:"Use Cases",id:"use-cases",level:2},{value:"Configuration",id:"configuration",level:2}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"ziplines",children:"Ziplines"})}),"\n",(0,s.jsxs)(t.p,{children:["Ziplines carry attached objects allowed via a ",(0,s.jsx)(t.code,{children:"TouchConfiguration"})," along a set path. A Zipline is a ",(0,s.jsx)(t.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Model",children:(0,s.jsx)(t.code,{children:"Model"})})," that contains a ",(0,s.jsx)(t.code,{children:"ZiplineConfiguration"}),", a ",(0,s.jsx)(t.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Folder",children:(0,s.jsx)(t.code,{children:"Folder"})})," called ",(0,s.jsx)(t.code,{children:"Points"}),", and a ",(0,s.jsx)(t.a,{href:"https://create.roblox.com/docs/reference/engine/classes/BasePart",children:(0,s.jsx)(t.code,{children:"BasePart"})})," called ",(0,s.jsx)(t.code,{children:"MountPart"}),". The zipline will always try to keep attached objects upright."]}),"\n",(0,s.jsx)(t.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(t.p,{children:"Ziplines can be used to transport players or pushboxes along a set path."}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["Ziplines must contain a folder called ",(0,s.jsx)(t.code,{children:"Points"}),". This folder must contain at least one ",(0,s.jsx)(t.code,{children:"BasePart"})," named ",(0,s.jsx)(t.code,{children:"1"}),". Additional guide points may be added, with integer names in sequence (eg. ",(0,s.jsx)(t.code,{children:"1"}),", ",(0,s.jsx)(t.code,{children:"2"}),", ",(0,s.jsx)(t.code,{children:"3"}),"). Any other parts in the folder are ignored. The positions of the segments are determined through ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm",children:"De Casteljou's algorithm"}),". Segments are automatically welded to ",(0,s.jsx)(t.code,{children:"MountPart"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Ziplines may also contain two additional ",(0,s.jsx)(t.code,{children:"Folder"}),"s called ",(0,s.jsx)(t.code,{children:"GuideEffects"})," and ",(0,s.jsx)(t.code,{children:"Sounds"}),". If these folders are not present, default fallbacks will be used."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Sound",children:(0,s.jsx)(t.code,{children:"Sound"})})," instances named ",(0,s.jsx)(t.code,{children:"ZiplineLoop"})," placed inside the ",(0,s.jsx)(t.code,{children:"GuideEffects"})," folder will be looped while the player is travelling through the zipline.\r\n",(0,s.jsx)(t.code,{children:"ParticleEmitter"})," instances placed inside the ",(0,s.jsx)(t.code,{children:"GuideEffects"})," folder will follow the guide part.\r\n",(0,s.jsx)(t.code,{children:"Sound"})," instances named ",(0,s.jsx)(t.code,{children:"Grab"})," placed inside the ",(0,s.jsx)(t.code,{children:"Sounds"})," folder will be played when the player initially mounts the zipline.\r\n",(0,s.jsx)(t.code,{children:"Sound"})," instances named ",(0,s.jsx)(t.code,{children:"Jump"})," placed inside the ",(0,s.jsx)(t.code,{children:"Sounds"})," folder will be played when the player dismounts the zipline."]}),"\n",(0,s.jsx)(t.p,{children:"Please note that any configuration related to player input will also apply when non-player objects are mounted on the zipline."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Default Value"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"AllowEndDismount"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"true"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"When false, the attached object will automatically detach from the zipline when it reaches the end"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"AllowJumpDismount"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"true"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"When true, jumping will cause the attached object to dismount from the zipline"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"AllowUserControl"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"false"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"When true, moving forwards or backwards will allow the attached object to move themselves along the zipline. When changing directions, the attached object will accelerate and deccelerate at 4 studs per second squared up to the maximum speed."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"GuideColor"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"(255, 255, 0)"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"The color of the part that connects the zipline to the attached object"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"KeepMomentum"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"false"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Whether the attached object retains its momentum when dismounted. Note that if a player has negative vertical momentum, it will not be retained because the player performs a jump when dismounting"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"RopeLength"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"0"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"The length of the rope formed between the attached object and the guide part"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"Segments"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"20"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"The amount of segments the curve is formed by. Must be a positive integer. Please note that there is a limit of 100 segments in order to reduce lag."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"Speed"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"5"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"The speed the guide part travels at, in studs per second"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>d});var i=n(96540);const s={},l=i.createContext(s);function c(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);