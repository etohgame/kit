{"searchDocs":[{"title":"ScopeCommunicator","type":0,"sectionRef":"#","url":"/kit/api/ScopeCommunicator","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#functions","content":" ","version":null,"tagName":"h2"},{"title":"destroy​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#destroy","content":"&lt;/&gt; ScopeCommunicator.destroy(self: any) → () Destroys the Communicator, disabling its use.  ","version":null,"tagName":"h3"},{"title":"listen​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#listen","content":"&lt;/&gt; ScopeCommunicator:listen(callback: () → ()) → () Listens for events to the Communicator, executing the callback function when the Communicator is fired.  ","version":null,"tagName":"h3"},{"title":"listenOnce​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#listenOnce","content":"&lt;/&gt; ScopeCommunicator:listenOnce(callback: () → ()) → () Wrapper for the listen function that automatically disconnects after one event.  ","version":null,"tagName":"h3"},{"title":"listenWait​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#listenWait","content":"&lt;/&gt; ScopeCommunicator:listenWait() → () Wrapper for the listenOnce function that will yield until an event is fired.  ","version":null,"tagName":"h3"},{"title":"fire​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#fire","content":"&lt;/&gt; ScopeCommunicator:fire(...: any) → () Fires the Communicator with the arguments provided.  ","version":null,"tagName":"h3"},{"title":"request​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#request","content":"&lt;/&gt; ScopeCommunicator:request(...: any) → () Requests a Communicator based on the provided arguments.  ","version":null,"tagName":"h3"},{"title":"getCommunicator​","type":1,"pageTitle":"ScopeCommunicator","url":"/kit/api/ScopeCommunicator#getCommunicator","content":"&lt;/&gt; ScopeCommunicator:getCommunicator( type: _TDefs.COMMUNICATOR_TYPES, key: string ) → () Creates a Communicator with the given type and key. Current valid types are &quot;event&quot; and &quot;request&quot; &quot;event&quot; types are BindableEvents &quot;request&quot; types are BindableFunctions ","version":null,"tagName":"h3"},{"title":"FlipManager","type":0,"sectionRef":"#","url":"/kit/api/FlipManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"FlipManager","url":"/kit/api/FlipManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"TryFlip​","type":1,"pageTitle":"FlipManager","url":"/kit/api/FlipManager#TryFlip","content":"&lt;/&gt; FlipManager:TryFlip() → () Performs a corner flip on any flip parts the player is touching. Parts can be marked as flip parts by: Adding a Tag or Instance inside the part called CanFlip Adding a callback on the part with FlipManager:BindToFlip() If the flip part has a TeleToObject ObjectValue present and set, the player will teleport to that object rather than to the other end of the flip part.  ","version":null,"tagName":"h3"},{"title":"BindToFlip​","type":1,"pageTitle":"FlipManager","url":"/kit/api/FlipManager#BindToFlip","content":"&lt;/&gt; FlipManager:BindToFlip( part: BasePart , callback: (rootPart: BasePart ) → () ) → () Binds the callback function to the part, executing the callback when the player performs a corner flip on it. ** Please add this to your Scope! ** ","version":null,"tagName":"h3"},{"title":"Instance","type":0,"sectionRef":"#","url":"/kit/api/Instance","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Instance","url":"/kit/api/Instance#functions","content":" ","version":null,"tagName":"h2"},{"title":"isPointer​","type":1,"pageTitle":"Instance","url":"/kit/api/Instance#isPointer","content":"&lt;/&gt; Instance.isPointer(object: Instance?) → () Returns whether the object is a module pointer. Module pointers are used for things such as module-based object configurations to help reduce memory usage when requiring them.  ","version":null,"tagName":"h3"},{"title":"getPointer​","type":1,"pageTitle":"Instance","url":"/kit/api/Instance#getPointer","content":"&lt;/&gt; Instance.getPointer(object: Instance?) → Instance? If the given object is a pointer, this function will return it's value. Otherwise, it will just return the object that was passed in. ","version":null,"tagName":"h3"},{"title":"Config","type":0,"sectionRef":"#","url":"/kit/api/Config","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Config","url":"/kit/api/Config#functions","content":" ","version":null,"tagName":"h2"},{"title":"getConfig​","type":1,"pageTitle":"Config","url":"/kit/api/Config#getConfig","content":"&lt;/&gt; Config.getConfig( scope: Scope?, config: Instance, defaults: T ) → () Returns the given config instance as a table. If any properties are missing from the instance, it will use the value from the defaults table. ","version":null,"tagName":"h3"},{"title":"Gui","type":0,"sectionRef":"#","url":"/kit/api/Gui","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Gui","url":"/kit/api/Gui#functions","content":" ","version":null,"tagName":"h2"},{"title":"bindKeyCache​","type":1,"pageTitle":"Gui","url":"/kit/api/Gui#bindKeyCache","content":"&lt;/&gt; Gui.bindKeyCache(cache: GuiManager_Types.KeyCache) → () Binds the given cache to the key cache.  ","version":null,"tagName":"h3"},{"title":"unbindKeyCache​","type":1,"pageTitle":"Gui","url":"/kit/api/Gui#unbindKeyCache","content":"&lt;/&gt; Gui.unbindKeyCache(cache: GuiManager_Types.KeyCache) → () Unbinds the given cache from the key cache. ","version":null,"tagName":"h3"},{"title":"GuiManager","type":0,"sectionRef":"#","url":"/kit/api/GuiManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"CreateBoostFrame​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#CreateBoostFrame","content":"&lt;/&gt; GuiManager:CreateBoostFrame(boostData: CharacterManager_Types.BoostData) → _TDefs.BoostTimerFrame Creates and returns a boost timer frame for the given boostType. The visual data for every type is defined in the BOOST_TIMER_DATA table.  ","version":null,"tagName":"h3"},{"title":"UpdateBoostFrame​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#UpdateBoostFrame","content":"&lt;/&gt; GuiManager:UpdateBoostFrame(boostData: CharacterManager_Types.BoostData) → () Updates a boost's timer frame.  ","version":null,"tagName":"h3"},{"title":"FormatBoostTimer​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#FormatBoostTimer","content":"&lt;/&gt; GuiManager:FormatBoostTimer(boostData: CharacterManager_Types.BoostData) → string Helper function that formats a boost's remaining time into a string.  ","version":null,"tagName":"h3"},{"title":"DestroyBoostFrame​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#DestroyBoostFrame","content":"&lt;/&gt; GuiManager:DestroyBoostFrame(boostData: CharacterManager_Types.BoostData) → () Destroys the given boost's timer frame, fading it out and deleting it when finished  ","version":null,"tagName":"h3"},{"title":"BindKeyCache​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#BindKeyCache","content":"&lt;/&gt; GuiManager:BindKeyCache(cache: _TDefs.KeyCache) → () Binds the given cache to the key cache.  ","version":null,"tagName":"h3"},{"title":"UnbindKeyCache​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#UnbindKeyCache","content":"&lt;/&gt; GuiManager:UnbindKeyCache(cache: _TDefs.KeyCache) → () Unbinds the given cache from the key cache.  ","version":null,"tagName":"h3"},{"title":"DisplayGUI​","type":1,"pageTitle":"GuiManager","url":"/kit/api/GuiManager#DisplayGUI","content":"&lt;/&gt; GuiManager:DisplayGUI( guiName: string, ...: any ) → () Displays the GUI with the given guiName on the player's screen. ","version":null,"tagName":"h3"},{"title":"Character","type":0,"sectionRef":"#","url":"/kit/api/Character","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Character","url":"/kit/api/Character#functions","content":" ","version":null,"tagName":"h2"},{"title":"getHitbox​","type":1,"pageTitle":"Character","url":"/kit/api/Character#getHitbox","content":"&lt;/&gt; Character.getHitbox( mode: HitboxModes, params: OverlapParams? ) → {BasePart } Returns a static hitbox attached to the character based on the provided mode. See the documentation on hitbox modes for more information.  ","version":null,"tagName":"h3"},{"title":"carryPart​","type":1,"pageTitle":"Character","url":"/kit/api/Character#carryPart","content":"&lt;/&gt; Character.carryPart( weldState: boolean, weldTo: BasePart , animationDisabled: boolean ) → () Makes the character carry the weldTo part, welding it to the character and displaying a carry animation on the character. The carry animation manipulates the character's shoulders directly instead of using an Animation, so it should work everywhere. If weldState is false, the character will stop carrying the part and the carry animation will stop.  ","version":null,"tagName":"h3"},{"title":"getCharacter​","type":1,"pageTitle":"Character","url":"/kit/api/Character#getCharacter","content":"&lt;/&gt; Character.getCharacter() → () Returns a table of character instances, such as: The Character itself The Character's humanoid The Character's RootPart The Character's PrimaryPart When the character respawns, all of the values will update accordingly. ","version":null,"tagName":"h3"},{"title":"Property","type":0,"sectionRef":"#","url":"/kit/api/Property","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Property","url":"/kit/api/Property#functions","content":" ","version":null,"tagName":"h2"},{"title":"getPropertySafe​","type":1,"pageTitle":"Property","url":"/kit/api/Property#getPropertySafe","content":"shorthand &lt;/&gt; Property.getPropertySafe( instance: any, property: string ) → ( any, boolean ) Safely gets a property of an object. Will return nil if the property does not exist, or if any errors occur.  ","version":null,"tagName":"h3"},{"title":"setPropertySafe​","type":1,"pageTitle":"Property","url":"/kit/api/Property#setPropertySafe","content":"shorthand &lt;/&gt; Property.setPropertySafe( instance: any, property: string, value: any ) → boolean Safely sets a property of an object.  ","version":null,"tagName":"h3"},{"title":"assureValueType​","type":1,"pageTitle":"Property","url":"/kit/api/Property#assureValueType","content":"shorthand &lt;/&gt; Property.assureValueType( value: unknown, default: defaultType ) → defaultType Checks if value and default are of the same type. If not, it will return the default value.  ","version":null,"tagName":"h3"},{"title":"assureAttribute​","type":1,"pageTitle":"Property","url":"/kit/api/Property#assureAttribute","content":"shorthand &lt;/&gt; Property.assureAttribute( instance: Instance?, configName: string, default: defaultType ) → defaultType Shorthand for utility.assureValueType(instance:GetAttribute(configName), default) ","version":null,"tagName":"h3"},{"title":"ScopeUtil","type":0,"sectionRef":"#","url":"/kit/api/ScopeUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ScopeUtil","url":"/kit/api/ScopeUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"getCached​","type":1,"pageTitle":"ScopeUtil","url":"/kit/api/ScopeUtil#getCached","content":"&lt;/&gt; ScopeUtil.getCached( scope: Scope, key: string, initializer: ( rootScope: any, utility: any ) → T ) → T Returns the cache with the given key from the given scope. If not found, the initializer callback will be ran in order to initialize the cache. ","version":null,"tagName":"h3"},{"title":"Functions","type":0,"sectionRef":"#","url":"/kit/api/Functions","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Functions","url":"/kit/api/Functions#functions","content":" ","version":null,"tagName":"h2"},{"title":"generateUID​","type":1,"pageTitle":"Functions","url":"/kit/api/Functions#generateUID","content":"shorthand &lt;/&gt; Functions.generateUID(curlyBraces: boolean?) → string Shorthand for HttpService:GenerateGUID(). utility.generateUID() --&gt; 4BA80F4637244B4BBA957E28B9443DE9   ","version":null,"tagName":"h3"},{"title":"tween​","type":1,"pageTitle":"Functions","url":"/kit/api/Functions#tween","content":"shorthand &lt;/&gt; Functions.tween( instance: Instance, config: number | typeof(Config.TWEEN_CONFIG), goal: {[string]: any}, easingStyle: Enum.EasingStyle?,-- EasingStyle easingDirection: Enum.EasingDirection?,-- EasingDirection ...: any ) → Tween  Simple tween function that handles garbage collection properly. utility.tween(part, 0.5, { Color = Color3.fromRGB(255, 0, 0) })   ","version":null,"tagName":"h3"},{"title":"playSoundFromInstance​","type":1,"pageTitle":"Functions","url":"/kit/api/Functions#playSoundFromInstance","content":"&lt;/&gt; Functions.playSoundFromInstance( instance: Instance, container: Instance, soundName: string, fallbackSound: Sound? ) → Sound?  Plays a sound with the given soundName from the given container at the instance's location. If the sound doesn't exist, fallbackSound will be used instead if set.  ","version":null,"tagName":"h3"},{"title":"roundColor​","type":1,"pageTitle":"Functions","url":"/kit/api/Functions#roundColor","content":"shorthand &lt;/&gt; Functions.roundColor(color: Color3 ) → Color3  Rounds the provided color to remedy rounding errors that cause issues on some devices when comparing two Color3 values.  ","version":null,"tagName":"h3"},{"title":"yieldTimeout​","type":1,"pageTitle":"Functions","url":"/kit/api/Functions#yieldTimeout","content":"&lt;/&gt; Functions.yieldTimeout( timeout: number, fn: (A...) → T..., ...: A... ) → T... Runs a function, and cancels it after the specified timeout duration if it hasn't finished by then. ","version":null,"tagName":"h3"},{"title":"Balloons","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/balloons","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Balloons","url":"/kit/docs/client-objects/balloons#use-cases","content":" Balloons can be used to slowly lift the player upwards or downwards while allowing free horizontal movement. Balloon visuals can be customized by editing the BalloonModel inside the balloon dispenser. Balloon timers can be customized by editing the TimerGui inside the balloon's configuration.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Balloons","url":"/kit/docs/client-objects/balloons#configuration","content":" Name\tDefault Value\tDescriptionAllowJumpDismount\ttrue\tDetermines whether the balloon can be dismounted by jumping. DestroyWhenExpired\ttrue\tWhen true, balloons are automatically dismounted upon expiring, otherwise they lose their velocity and do not rise. Speed\t5\tThe velocity at which the balloon rises (or falls, if negative). KeepMomentum\ttrue\tWhen true, objects will keep any momentum they had on the balloon after dismounting. MaxHeight\t0\tThe maximum height difference between the balloon and the dispenser before expiring. Ignored if set to 0. RopeLength\t8\tThe length of the balloon's rope. Timer\t0\tThe amount of time before the balloon expires automatically (infinite if set to 0). ","version":"Next","tagName":"h2"},{"title":"Boost Pads","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/boost-pads","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Boost Pads","url":"/kit/docs/client-objects/boost-pads#use-cases","content":" Boost Pads can be used to have a Boost only be active when the player is interacting with the Boost Pad. This can be used to prevent the player from moving during cutscenes.  Boost Pads will instantly end their effect when deactivated rather than having it slowly fade over time.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Boost Pads","url":"/kit/docs/client-objects/boost-pads#configuration","content":" For the Type and Power settings, see Boosters  Name\tDefault Value\tDescriptionType\tSpeed\tThe type of the boost. Power\t32 (Speed), 100 (Jump)\tThe power of the boost. Distance\t10\tHow far above the boost pad the boost will be active, measured in studs. ","version":"Next","tagName":"h2"},{"title":"Attachers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/attachers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Attachers","url":"/kit/docs/client-objects/attachers#use-cases","content":" Attaching objects to the object that interacted with the Attacher, or making objects face the player.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Attachers","url":"/kit/docs/client-objects/attachers#configuration","content":" Name\tDefault Value\tDescriptionAttachUsingAlign\ttrue\tIf false, uses a WeldConstraint to attach the PrimaryPart. Otherwise, it uses an AlignOrientation and AlignPosition object. CleanDelay\t3\tTime in seconds to wait before cleaning up attachment objects after dismount. Cooldown\t0.5\tTime in seconds to wait before the Attacher can activate again DismountState\tEnum.HumanoidStateType.Jumping\tThe humanoid state that will trigger a dismount. Some dismount states are not allowed, as they never trigger. In those cases, use Enum.HumanoidStateType.None DismountStateEnabled\ttrue\tWhether the dismount state check is enabled. Offset\tCFrame.new(0, 0, -5)\tOffset applied to the primary part when attaching. WeldToLimb\tEnum.Limb.Torso\tThe limb to attach the object to. Ignored if the target is not a player. ","version":"Next","tagName":"h2"},{"title":"Bounce Pads","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/bounce-pads","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Bounce Pads","url":"/kit/docs/client-objects/bounce-pads#use-cases","content":" Bounce Pads can be used to launch objects in any direction. They only apply a single impulse, unlike Elevators which continously apply force until the object stops touching the Elevator.  The sounds and particles inside the Boost Pad can be modified to your liking.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Bounce Pads","url":"/kit/docs/client-objects/bounce-pads#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0.05\tDelay between being able to use the Bounce Pad again. Power\t100\tThe power the bounce pad will launch objects at. RelativeForce\ttrue\tWhen true, interacting parts will be launched in the direction the bounce pad is facing. Otherwise, they will launch directly upwards no matter the rotation of the pad. ","version":"Next","tagName":"h2"},{"title":"Beat Blocks","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/beat-blocks","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Beat Blocks","url":"/kit/docs/client-objects/beat-blocks#use-cases","content":" Beat blocks can be used for gameplay where the player has to time their jumps, or as animated design.  ","version":"Next","tagName":"h2"},{"title":"Music Sync​","type":1,"pageTitle":"Beat Blocks","url":"/kit/docs/client-objects/beat-blocks#music-sync","content":" Beat blocks can be synced to the tower's music. This will make the beat blocks toggle on every beat of the currently playing song. See the documentation on music sync for more information.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Beat Blocks","url":"/kit/docs/client-objects/beat-blocks#configuration","content":" Name\tDefault Value\tDescriptionIndicator\ttrue\tWhen true, an indicator will be shown on the next set of parts before they toggle. This will help the player time their movement. It is heavily recommended to leave this enabled if you are using the beat blocks for gameplay purposes. Interval\t1\tThe interval in seconds between the beat blocks toggling on and off. MaterialIndicator\tSmoothPlastic\tWhen the Indicator configuration is enabled, the indicator will use this material. OffCanCollide\tfalse\tWhen a beat block is off, its CanCollide property will be set to this value. OffCanTouch\ttrue\tWhen a beat block is off, its CanTouch property will be set to this value. OffTransparency\t0.7\tWhen a beat block is off, its Transparency property will be set to this value. OnCanCollide\ttrue\tWhen a beat block is on, its CanCollide property will be set to this value. OnCanTouch\ttrue\tWhen a beat block is on, its CanTouch property will be set to this value. OnTransparency\t0\tWhen a beat block is on, its Transparency property will be set to this value. ","version":"Next","tagName":"h2"},{"title":"Boosters","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/boosters","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Boosters","url":"/kit/docs/client-objects/boosters#use-cases","content":" Boosters can be used to give the player a movement boost. These can be either temporary or permanent until removed.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Boosters","url":"/kit/docs/client-objects/boosters#configuration","content":" Name\tDefault Value\tDescriptionMode\tDefault\tThe mode of the booster. Type\tSpeed\tThe type of the boost. Power\t32 (Speed), 100 (Jump)\tThe power of the boost. Duration\t5\tDuration of the boost in seconds. If set to 0, the boost will be infinite until removed. TimerDecimals\t1\tThe amount of decimals to show on the boost timer. HideGUI\tfalse\tWhen true, the boost GUI will not be shown.  ","version":"Next","tagName":"h2"},{"title":"Types​","type":1,"pageTitle":"Boosters","url":"/kit/docs/client-objects/boosters#types","content":" Type\tHumanoid Property affected\tDefault ValueSpeed\tWalkSpeed\t16 Jump\tJumpPower\t50  ","version":"Next","tagName":"h2"},{"title":"Modes​","type":1,"pageTitle":"Boosters","url":"/kit/docs/client-objects/boosters#modes","content":" Mode\tDescriptionDefault\tBooster will behave as normal. Boost can only be removed by a Boost Remover or by letting the timer expire. Zone\tThe boost will automatically end once the player stops interacting with the booster. ","version":"Next","tagName":"h2"},{"title":"Table","type":0,"sectionRef":"#","url":"/kit/api/Table","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Table","url":"/kit/api/Table#functions","content":" ","version":null,"tagName":"h2"},{"title":"merge​","type":1,"pageTitle":"Table","url":"/kit/api/Table#merge","content":"&lt;/&gt; Table.merge( itemA: any, itemB: any?, ...: any ) → any Merges the given tables.  ","version":null,"tagName":"h3"},{"title":"Splice​","type":1,"pageTitle":"Table","url":"/kit/api/Table#Splice","content":"&lt;/&gt; Table.Splice( item: {T}, min: number, max: number ) → {T} Splices the given table, returning a copy of the table that only contains the indices from min to max.  ","version":null,"tagName":"h3"},{"title":"Size​","type":1,"pageTitle":"Table","url":"/kit/api/Table#Size","content":"&lt;/&gt; Table.Size(item: {any}) → number Returns the amount of indices in the table.  ","version":null,"tagName":"h3"},{"title":"Compare​","type":1,"pageTitle":"Table","url":"/kit/api/Table#Compare","content":"&lt;/&gt; Table.Compare( itemA: any, itemB: any, ignoreMetatable: boolean? ) → boolean Compares itemA and itemB and returns whether they are exact matches of each other. If ignoreMetatable is set, metatables will be ignored in this check.  ","version":null,"tagName":"h3"},{"title":"FlipValuesIndices​","type":1,"pageTitle":"Table","url":"/kit/api/Table#FlipValuesIndices","content":"&lt;/&gt; Table.FlipValuesIndices(item: {[I]: V}) → {[V]: I} Flips all indices of the given table, rearranging it from back to front. ","version":null,"tagName":"h3"},{"title":"Button Deactivators","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/button-deactivators","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Button Deactivators","url":"/kit/docs/client-objects/button-deactivators#use-cases","content":" Button deactivators are used to deactivate active Buttons. This can be used for gameplay and complex mechanisms that use Buttons.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Button Deactivators","url":"/kit/docs/client-objects/button-deactivators#configuration","content":" Name\tDefault Value\tDescriptionColorSpecific\tfalse\tWhen true, only Buttons that share the color of the Button Deactivator will be deactivated. Otherwise, every single Button will be deactivated regardless of color. ","version":"Next","tagName":"h2"},{"title":"Conveyors","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/conveyors","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Conveyors","url":"/kit/docs/client-objects/conveyors#use-cases","content":" Conveyors are useful for quickly moving objects to different places. They can also be used as obstacles the player has to avoid.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Conveyors","url":"/kit/docs/client-objects/conveyors#configuration","content":" Name\tDefault Value\tDescriptionSpeed\t10\tThe speed the conveyor will move objects at, measured in studs per second. ","version":"Next","tagName":"h2"},{"title":"JumpButton","type":0,"sectionRef":"#","url":"/kit/api/JumpButton","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"JumpButton","url":"/kit/api/JumpButton#functions","content":" ","version":null,"tagName":"h2"},{"title":"IsDown​","type":1,"pageTitle":"JumpButton","url":"/kit/api/JumpButton#IsDown","content":"&lt;/&gt; JumpButton.IsDown() → boolean Returns whether the jump button is currently being held down. ","version":null,"tagName":"h3"},{"title":"Distance Culling","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/distance-culling","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Distance Culling","url":"/kit/docs/client-objects/distance-culling#use-cases","content":" Distance Culling is used for lag reduction. From Kit v6 onwards, most physics objects are now in this folder by default.  You can disable Distance Culling on a per-object basis by dragging them out of this folder, however this is heavily discouraged unless absolutely necessary as having too many permanently active objects can cause performance issues, especially if the objects are very big or if you have a lot of them.  Objects inside Distance Culling must have a PrimaryPart in order for them to function.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Distance Culling","url":"/kit/docs/client-objects/distance-culling#configuration","content":" Name\tDefault Value\tDescriptionRange\t150\tHow far away the player can be before objects toggle. Can be overridden on a per-object basis by adding a number Attribute named CustomRange to the object. UpdateInterval\t0.2\tHow often the distance culling system will update. Mode\tAnchor\tHow the distance culling system will behave. See Modes for more information.  ","version":"Next","tagName":"h2"},{"title":"Modes​","type":1,"pageTitle":"Distance Culling","url":"/kit/docs/client-objects/distance-culling#modes","content":" Mode\tDescriptionAnchor\tFar-away objects will freeze in place. Unload\tFar-away objects will unload entirely. ","version":"Next","tagName":"h2"},{"title":"LightingManager","type":0,"sectionRef":"#","url":"/kit/api/LightingManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"LightingManager","url":"/kit/api/LightingManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"ChangeLighting​","type":1,"pageTitle":"LightingManager","url":"/kit/api/LightingManager#ChangeLighting","content":"&lt;/&gt; LightingManager:ChangeLighting(config: _TDefs.LightingConfiguration) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"LightingManager","url":"/kit/api/LightingManager##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"LightingManager","url":"/kit/api/LightingManager#LightingConfiguration","content":"interface LightingConfiguration { Type: string Configuration: Default | {[string]: any} TweenInfo: TweenInfo? UseDefault: string? SetDefault: string? }  Changes the active lighting based on the given config. You can create a lighting preset by using SetDefault as a string parameter in a lighting changer's config module. These can then be reused by using UseDefault as a string parameter with the same value.  ","version":null,"tagName":"h3"},{"title":"ResetLighting​","type":1,"pageTitle":"LightingManager","url":"/kit/api/LightingManager#ResetLighting","content":"&lt;/&gt; LightingManager:ResetLighting() → () Resets all lighting properties back to their default state.  ","version":null,"tagName":"h3"},{"title":"DeregisterPreset​","type":1,"pageTitle":"LightingManager","url":"/kit/api/LightingManager#DeregisterPreset","content":"&lt;/&gt; LightingManager:DeregisterPreset(preset: string) → () Removes the registered preset from the lighting template list. Used when the client object folder unloads. ","version":null,"tagName":"h3"},{"title":"Elevators","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/elevators","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Elevators","url":"/kit/docs/client-objects/elevators#use-cases","content":" Elevators can be used to move players and objects around, or launch them away. Elevators will keep applying a set velocity as long as the object is touching or inside of the Elevator.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Elevators","url":"/kit/docs/client-objects/elevators#configuration","content":" Name\tDefault Value\tDescriptionContinuousUpdates\tfalse\tWhen true, the direction players and objects will be moved in will update when the Elevator moves. Otherwise, they will keep moving in the direction the Elevator was facing when they entered the Elevator. MaxForce\tInfinity\tThe maximum amount of force the Elevator can use when moving objects. Lower values will give the player more control over their movement while in the Elevator. Please note that the Elevator may not function if set to very low values (~2000 or lower). Speed\t40\tThe speed the Elevator will move objects at, in studs per second. HitboxMode\tStaticWholeBody\tThe hitbox mode used by the Elevator. Vector\tUpVector\tWhich facing direction of the Elevator it will launch objects in. Supported values are UpVector, RightVector and LookVector. Use a negative Speed value if you want to reverse these directions. ","version":"Next","tagName":"h2"},{"title":"Emitters","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/emitters","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Emitters","url":"/kit/docs/client-objects/emitters#use-cases","content":" Emitters can be used for cinematic effects and gameplay cues. They can be limited by theUses configuration as to not emit more than the specified number of times.  Sound and ParticleEmitter objects have an optional EmitDelay attribute that specifies how long the Emitter should wait for before emitting those objects. ParticleEmitters also have an optional EmitCount attribute that specifies how many particles to emit.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Emitters","url":"/kit/docs/client-objects/emitters#configuration","content":" Name\tDefault Value\tDescriptionGlobalSound\ttrue\tWhether Sound instances should play globally or spatially from the Emitter. Uses\t0\tHow many times the Emitter can be used. Every time the emitter is used, this value is decremented. If set to 0, the Emitter will have infinite uses. Cooldown\t1\tTime in seconds to wait before the Emitter can activate again. ","version":"Next","tagName":"h2"},{"title":"Damage Bricks","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/damage-bricks","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Damage Bricks","url":"/kit/docs/client-objects/damage-bricks#use-cases","content":" Damage Bricks are used to deal damage to the player, for example to punish the player for falling or to keep them moving. Avoid using them excessively as this can create annoying gameplay.  ","version":"Next","tagName":"h2"},{"title":"Damage Brick Types​","type":1,"pageTitle":"Damage Bricks","url":"/kit/docs/client-objects/damage-bricks#damage-brick-types","content":" Type\tDamagekills\t5 double\t10 ouch\t20 instakills\tinfinite heals\tHeals the player to full health custom\tCustom damage value  ","version":"Next","tagName":"h2"},{"title":"Damage Brick Configuration​","type":1,"pageTitle":"Damage Bricks","url":"/kit/docs/client-objects/damage-bricks#damage-brick-configuration","content":" Name\tDefault Value\tDescriptionCooldown\t1\tTime in seconds to wait before the Damage Brick can deal damage again. Type\tkills\tThe type of damage brick. See the list of types. Damage\t0\tThe amount of damage the player will take. The damage type must be set to custom for this to work. ","version":"Next","tagName":"h2"},{"title":"Dismounters","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/dismounters","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Dismounters","url":"/kit/docs/client-objects/dismounters#use-cases","content":" Dismounters can be used to forcefully dismount the player from mounts.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Dismounters","url":"/kit/docs/client-objects/dismounters#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0\tDelay between being able to use the Dismounter. MountColorSpecific\tfalse\tWhen true, the mount's color must match the Dismounter's color in order to be activated. DismountAttachers\ttrue\tWhen true, the Dismounter can dismount you from Attachers. DismountBalloons\ttrue\tWhen true, the Dismounter can dismount you from Balloons. DismountSeats\ttrue\tWhen true, the Dismounter can dismount you from Seats. DismountSwings\ttrue\tWhen true, the Dismounter can dismount you from Swings. DismountVines\ttrue\tWhen true, the Dismounter can dismount you from Vines. ForceDismountPlayer\tfalse\tWhen true, any part touching the dismounter will dismount anything mounted to the Player's character. ","version":"Next","tagName":"h2"},{"title":"Gradient Parts","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/gradient-parts","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Gradient Parts","url":"/kit/docs/client-objects/gradient-parts#use-cases","content":" Gradient Parts can be used for decoration. A few examples of these are pulsing parts and rainbow parts. Unlike Beams, which can have multiple colors at once, the color of Gradient Parts is uniform across all parts.  Gradient Parts automatically any applicable objects inside them as well. This can be disabled by adding a DoNotColor tag to any objects you don't want colored.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Gradient Parts","url":"/kit/docs/client-objects/gradient-parts#configuration","content":" Name\tDefault Value\tDescriptionMaxDistance\t100\tThe furthest the player can be from the DistancePivot before the Gradient Parts will pause to improve performance. RefreshRate\t30\tHow many times per second the Gradient Parts will update their color. TickOffset\t0\tThe offset in seconds for the color shifting calculation. Throttle\t64\tThe part throttle limit. If there are more parts in a Gradient Parts group than the configured maximum, there will be a 1 frame delay every that amount of parts to improve performance. ","version":"Next","tagName":"h2"},{"title":"GUI Displayers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/gui-displayers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"GUI Displayers","url":"/kit/docs/client-objects/gui-displayers#use-cases","content":" GUI Displayers can be used to display any GUI on the player's screen. Displayed GUIs can be modified using Property Changers to edit or animate them.  ","version":"Next","tagName":"h2"},{"title":"Folder Configuration​","type":1,"pageTitle":"GUI Displayers","url":"/kit/docs/client-objects/gui-displayers#folder-configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0.25\tDelay between being able to activate the GUI Displayer again.  ","version":"Next","tagName":"h2"},{"title":"Displayer Configuration​","type":1,"pageTitle":"GUI Displayers","url":"/kit/docs/client-objects/gui-displayers#displayer-configuration","content":" Name\tDefault Value\tDescriptionAutoRemove\t0\tThe displayed GUI will automatically be destroyed after this amount of time. If set to 0, the GUI will be displayed forever until manually removed. ","version":"Next","tagName":"h2"},{"title":"Buttons","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/buttons","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Buttons","url":"/kit/docs/client-objects/buttons#use-cases","content":" Buttons may be used to create toggleable parts and objects. This can be used for progression, timed sections, or to activate platforms that make recovery faster.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Buttons","url":"/kit/docs/client-objects/buttons#configuration","content":" Name\tDefault Value\tDescriptionHideGUI\tfalse\tWhen true, the timer label displayed on the button and the game's UI will not be shown. PadDistance\t10\tWhen PadMode is true, the maximum distance above the button the object that activated the button can be before it deactivates. PadMode\tfalse\tWhen true, the button will only be activated while an object is actively touching the ButtonPart. If not touching, it will automatically deactivate. PressedMaterial\tNeon\tThe material of the Button when pressed. PressOffset\tCFrame.new(0, -0.75, 0)\tThe offset of the ButtonPart when pressed. Uses the provided TweenConfiguration. Timer\t0\tThe time the button will be activated for before automatically deactivating. If set to 0, the button will not have a timer. TimerDecimalPlaces\t0\tThe number of decimal places displayed on the timer label. TimerText\t{T}\tThe text that appears on the timer display. See this page for more info.  The TimerLabel is found inside the ButtonConfiguration and can be configured seperately. The UseSpecialColor tag can be used on the TimerLabel to disable its automatic coloring.  ","version":"Next","tagName":"h2"},{"title":"Button Activated Objects​","type":1,"pageTitle":"Buttons","url":"/kit/docs/client-objects/buttons#button-activated-objects","content":" Any Part with the ButtonActivated tag will be considered a button activated object. By default, button activated objects behave as follows:  Button State\tCanCollide\tTransparency\tClient Object StateUnpressed\tfalse\t0.6\tDisabled Pressed\ttrue\t0\tEnabled  These will be inverted if the object has the Invert tag.  Please note that if 64 or more parts are toggled at once, there will be a 1 frame delay every 64 parts to improve performance.  ","version":"Next","tagName":"h2"},{"title":"Supported Visual Instances​","type":1,"pageTitle":"Buttons","url":"/kit/docs/client-objects/buttons#supported-visual-instances","content":" If the following objects are found inside of a button activated object, they will match the object's transparency when toggled:  Object\tProperty AffectedDecal\tTransparency Texture\tTransparency SelectionBox\tTransparency SelectionSphere\tTransparency Frame\tBackgroundTransparency CanvasGroup\tGroupTransparency TextLabel\tTextTransparency ImageLabel\tImageTransparency  If the following objects are found inside of a button activated object, they will have their Enabled property toggled to match the button's state:  ObjectBeam ParticleEmitter Fire Sparkles Smoke Trail UIStroke UIGradient  ","version":"Next","tagName":"h3"},{"title":"Button Activated Object Configurations​","type":1,"pageTitle":"Buttons","url":"/kit/docs/client-objects/buttons#button-activated-object-configurations","content":" Button activated objects have special configurations that can be modified using Attributes and Tags:  Name\tType\tDescriptionColorOverride\tColor3 Attribute\tThe object will behave as if it is linked to that Color rather than the object's actual color. If a ButtonPart has this attribute, its functionality may be toggled by other Buttons. FullHide\tTag\tSets the Unpressed Transparency to 1. SetTransparency\tnumber Attribute\tChanges the Transparency of the object in the Unpressed state. IgnoreTransparency\tTag\tThe Transparency of the object will not be changed and remains in its default state from Studio. IgnoreCanCollide\tTag\tThe CanCollide of the object will not be changed and remains in its default state from Studio. IgnoreEnabled\tTag\tThe Enabled property of the object will not be changed and remains in its default state from Studio. Invisible\tTag\tThe Transparency of the object will always be 1 no matter the button state. Invert\tTag\tSwaps the properties of the Pressed and Unpressed states. IgnoreInitialActivate\tTag\tThe object will not be affected by the first update that happens when the Button initially loads. It will still be affected by further updates. IgnoreAll\tTag\tThe object will act as if the IgnoreTransparency, IgnoreCanCollide and IgnoreEnabled tags are all present.  ","version":"Next","tagName":"h2"},{"title":"Unsupported Client Objects​","type":1,"pageTitle":"Buttons","url":"/kit/docs/client-objects/buttons#unsupported-client-objects","content":" Below is a list of all the client objects that either cannot currently be toggled by a Button, or have known issues regarding them when button activated.  Unsupported Client Object\tNotesVanishers\tInconsistent behaviour when toggled while vanishing ","version":"Next","tagName":"h2"},{"title":"CharacterManager","type":0,"sectionRef":"#","url":"/kit/api/CharacterManager","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#types","content":" ","version":null,"tagName":"h2"},{"title":"BoostData​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#BoostData","content":"&lt;/&gt; interface BoostData { isPad: boolean startTime: number mode: string type: string power: number duration: number timerDecimals: boolean hideGUI: boolean startTweenInfo: TweenInfo endtweenInfo: TweenInfo infinite: boolean multiplier: number timeLeft: number }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"ValidateDamageBrick​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#ValidateDamageBrick","content":"&lt;/&gt; CharacterManager:ValidateDamageBrick(brick: BasePart ) → () Function internally used to validate a damage brick's damage value. This also checks whether the damage brick is deactivated or not.  ","version":null,"tagName":"h3"},{"title":"Damage​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#Damage","content":"&lt;/&gt; CharacterManager:Damage(damage: BasePart | string | number) → () Fires the DamageEvent with the given damage value. damage can be either a number, or a string representing a key in the VALID_DAMAGEBRICKS table.  ","version":null,"tagName":"h3"},{"title":"GetHumanoid​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#GetHumanoid","content":"&lt;/&gt; CharacterManager:GetHumanoid(player: Player ) → Humanoid?  Returns the player's Humanoid if it exists.  ","version":null,"tagName":"h3"},{"title":"GetActiveBoost​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#GetActiveBoost","content":"&lt;/&gt; CharacterManager:GetActiveBoost( boostType: string, isPad: boolean? ) → _TDefs.BoostData? Get a currently active boost with the given boostType. If isPad is true, it will return the currently active boost pad. Otherwise, it will return the currently active regular boost.  ","version":null,"tagName":"h3"},{"title":"IsBoostInfinite​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#IsBoostInfinite","content":"&lt;/&gt; CharacterManager:IsBoostInfinite(boostData: _TDefs.BoostData) → boolean Returns whether a given boost should be infinite or not. Boosts with a duration of 0 or below, or higher than 10^10 are considered infinite and will never run out unless removed by a boost remover.  ","version":null,"tagName":"h3"},{"title":"StartBoost​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#StartBoost","content":"&lt;/&gt; CharacterManager:StartBoost(boostData: _TDefs.BoostData) → () Starts a boost with the given boost data. If a boost with the given type is already active, the already active boost will be refreshed instead of a new boost being started.  ","version":null,"tagName":"h3"},{"title":"UpdateBoost​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#UpdateBoost","content":"&lt;/&gt; CharacterManager:UpdateBoost( boostData: _TDefs.BoostData, boostEnded: boolean? ) → () Updates the given boost, updating the affected property. If boostEnded is true, the character will return to it's default properties rather than using the boost's power.  ","version":null,"tagName":"h3"},{"title":"RemoveBoost​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#RemoveBoost","content":"&lt;/&gt; CharacterManager:RemoveBoost(boostData: _TDefs.BoostData) → () Ends the given boost.  ","version":null,"tagName":"h3"},{"title":"GetActiveBoosts​","type":1,"pageTitle":"CharacterManager","url":"/kit/api/CharacterManager#GetActiveBoosts","content":"&lt;/&gt; CharacterManager:GetActiveBoosts() → {_TDefs.BoostData} Returns a table containing the currently active boosts. ","version":null,"tagName":"h3"},{"title":"ClientObjectManager","type":0,"sectionRef":"#","url":"/kit/api/ClientObjectManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ClientObjectManager","url":"/kit/api/ClientObjectManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"ScanFolder​","type":1,"pageTitle":"ClientObjectManager","url":"/kit/api/ClientObjectManager#ScanFolder","content":"&lt;/&gt; ClientObjectManager:ScanFolder( targetScope: ScopeTypes.Scope, path: Instance, targetPath: Instance? ) → () Scans the given folder for Client Objects and loads their scripts. Used when certain Client Objects (such as Pushboxes) spawn other COs.  ","version":null,"tagName":"h3"},{"title":"LoadClientObjects​","type":1,"pageTitle":"ClientObjectManager","url":"/kit/api/ClientObjectManager#LoadClientObjects","content":"&lt;/&gt; ClientObjectManager:LoadClientObjects( from: Instance, target: Instance, tower: string, towerRepository: Instance? ) → () Loads the client objects found in from into the target, setting them up and running their respective repository scripts. towerRepository determines where the repository scripts for COs will be retrieved from. If not set, this will default to Framework.Kit.Repository. ","version":null,"tagName":"h3"},{"title":"Moving Platforms","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/moving-platforms","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Moving Platforms","url":"/kit/docs/client-objects/moving-platforms#use-cases","content":" Moving Platforms can be used to transport players and objects between various locations. They can also rotate if the destinations are rotated. You can use them to mimic Shoving Platforms from older kits by using the Tween configuration.  ","version":"Next","tagName":"h2"},{"title":"Moving Platform Configuration​","type":1,"pageTitle":"Moving Platforms","url":"/kit/docs/client-objects/moving-platforms#moving-platform-configuration","content":" Name\tDefault Value\tDescriptionTouchActivated\tfalse\tWhen true, the platform will not start moving until it is interacted with. Useful for not making the player wait around too long. Tween\tfalse\tWhen true, the platform will move using the TweenConfiguration found in each destination part instead of moving with the default speed. It will still carry objects. Please note that when this is enabled, the Reponsiveness on both the AlignPosition and AlignOrientation objects must be increased in order to have it function properly.  ","version":"Next","tagName":"h2"},{"title":"Position Configuration​","type":1,"pageTitle":"Moving Platforms","url":"/kit/docs/client-objects/moving-platforms#position-configuration","content":" Name\tDefault Value\tDescriptionMoveDelay\t2\tHow long the platform will stay at this position before moving onto the next. ","version":"Next","tagName":"h2"},{"title":"Jump Launchers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/jump-launchers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Jump Launchers","url":"/kit/docs/client-objects/jump-launchers#use-cases","content":" Jump Launchers are most commonly used as double jumps. They can be buffered by holding the jump button before touching them, in order to make timing them easier.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Jump Launchers","url":"/kit/docs/client-objects/jump-launchers#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0.25\tTime in seconds to wait before the Jump Launcher can activate again. Force\t60\tThe speed interacting objects will be launched at when activated. ","version":"Next","tagName":"h2"},{"title":"Keys","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/keys","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Keys","url":"/kit/docs/client-objects/keys#use-cases","content":" Keys are used to open any key doors that are in the same group as the key.  Key doors can be used to require the player to pick them up in order to proceed. A key door can be destroyed in multiple ways when opened, based on what the parts inside are named:  Part Name\tFunctionVanish\tThe part will fade out, being destroyed after the fade ends. Fall\tThe part will become unanchored, being destroyed after 10 seconds. Destroy\tThe part will simply be destroyed immediately.  Any parts named ReturnKey inside of the key group will cause the key to return to its original spot upon being touched.  ","version":"Next","tagName":"h2"},{"title":"Key Configuration​","type":1,"pageTitle":"Keys","url":"/kit/docs/client-objects/keys#key-configuration","content":" Name\tDefault Value\tDescriptionSpinSpeed\t5\tHow fast the key will spin, measured in radians per second. Timer\t0\tThe amount of time you can pick this key up for before it'll return to its original spot. If set to 0, the key will not have a timer TimerDecimalPlaces\t1\tThe amount of decimals that will be shown on the timer. ViewportOffset\tCFrame.new(0, 0, 0)\tOffset applied to the key's model in its viewport when collected.  ","version":"Next","tagName":"h2"},{"title":"Door Configuration​","type":1,"pageTitle":"Keys","url":"/kit/docs/client-objects/keys#door-configuration","content":" Name\tDefault Value\tDescriptionRequiredKeys\t1\tThe amount of keys needed to open the door. ","version":"Next","tagName":"h2"},{"title":"Falling Platforms","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/falling-platforms","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Falling Platforms","url":"/kit/docs/client-objects/falling-platforms#use-cases","content":" Falling Platforms can be used for advanced gameplay mechanics or to force the player not to wait around on certain sections. It is heavily recommended not to use them as traps as it can create frustrating and unfair gameplay.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Falling Platforms","url":"/kit/docs/client-objects/falling-platforms#configuration","content":" Name\tDefault Value\tDescriptionActivateConnectedParts\ttrue\tWhen true, all other parts welded to the falling platform will also become uncollidable when the main platform touches the End part. ActiveCanCollide\tfalse\tThe CanCollide of the falling platform when active. ActiveTime\t1.5\tTime in seconds the falling platform will be uncollidable for after it touches the End part. ActiveTransparency\t0.75\tThe transparency the falling platform will use while uncollidable. BaseMass\t12.6\tThe mass of the falling platform, used to set the density of the platform. Higher values will make the platform heavier. Very low values may make the platform unstable. InactiveTransparency\t0\tThe transparency the falling platform will use while collidable. ","version":"Next","tagName":"h2"},{"title":"Scope","type":0,"sectionRef":"#","url":"/kit/api/Scope","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#properties","content":" ","version":null,"tagName":"h2"},{"title":"instance​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#instance","content":"&lt;/&gt; Scope.instance: Instance? The scope's instance.  ","version":null,"tagName":"h3"},{"title":"scriptPath​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#scriptPath","content":"&lt;/&gt; Scope.scriptPath: string? The scope's script path.  ","version":null,"tagName":"h3"},{"title":"rootScope​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#rootScope","content":"&lt;/&gt; Scope.rootScope: Scope The scope's root scope.  ","version":null,"tagName":"h3"},{"title":"parentScope​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#parentScope","content":"&lt;/&gt; Scope.parentScope: Scope The scope's parent scope.  ","version":null,"tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#id","content":"&lt;/&gt; Scope.id: string The scope's ID.  ","version":null,"tagName":"h3"},{"title":"tower​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#tower","content":"&lt;/&gt; Scope.tower: string The tower's name.  ","version":null,"tagName":"h3"},{"title":"clientObjects​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#clientObjects","content":"&lt;/&gt; Scope.clientObjects: Instance The tower's client objects container.  ","version":null,"tagName":"h3"},{"title":"shared​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#shared","content":"&lt;/&gt; Scope.shared: {[string]: any} A shared table across every single scope inherited by the rootScope  ","version":null,"tagName":"h3"},{"title":"repository​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#repository","content":"&lt;/&gt; Scope.repository: {[string]: any} A table of every single repository script that is currently loaded.  ","version":null,"tagName":"h3"},{"title":"active​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#active","content":"&lt;/&gt; Scope.active: boolean A variable  ","version":null,"tagName":"h3"},{"title":"activeScripts​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#activeScripts","content":"&lt;/&gt; Scope.activeScripts: {[string]: {[Instance]: boolean}} All of the current scripts running ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#functions","content":" ","version":null,"tagName":"h2"},{"title":"log​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#log","content":"&lt;/&gt; Scope:log(data: any) → () Logs the provided data table into the output.  ","version":null,"tagName":"h3"},{"title":"add​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#add","content":"&lt;/&gt; Scope:add(...: T...) → T... Adds the given items into the Scope, automatically cleaning it up when the Scope unloads. All of the items that are passed in to this function will be returned right back. INFO It is important that you put all of your Instances and Connections in this function to be cleaned up when the player leaves the tower. Any functions passed in will run when it is time to clean up. CAUTION This function will throw an error if used during the scope's cleanup process.  ","version":null,"tagName":"h3"},{"title":"inherit​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#inherit","content":"&lt;/&gt; Scope:inherit(data: any) → () Creates a new child Scope within the current Scope. Used for client objects that have the capability of spawning other client objects, so cloned models can be cleaned up without the entire object's scope being removed.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#remove","content":"&lt;/&gt; Scope:remove( item: any, doNotCleanup: boolean? ) → () Removes the given item from the Scope. If doNotCleanup is set, the object will not be automatically destroyed along with this.  ","version":null,"tagName":"h3"},{"title":"cleanup​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#cleanup","content":"&lt;/&gt; Scope:cleanup( defer: boolean?, destroy: boolean? ) → () Cleans up the Scope. If defer is set, the cleanup will be deferred rather than occuring immediately. If destroy is set, the Scope will be fully destroyed rather than only cleaning up.  ","version":null,"tagName":"h3"},{"title":"attach​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#attach","content":"&lt;/&gt; Scope:attach( instance: Instance, removeFromParentScope: boolean? ) → () Attaches the Scope to the given instance, cleaning up the Scope if the instance gets destroyed.  ","version":null,"tagName":"h3"},{"title":"spawn​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#spawn","content":"&lt;/&gt; Scope:spawn( fn: (T...) → ...unknown, ...: T... ) → () Runs task.spawn with the given function and adds it to the Scope, cancelling it if the Scope unloads while the task is running.  ","version":null,"tagName":"h3"},{"title":"defer​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#defer","content":"&lt;/&gt; Scope:defer( fn: (T...) → ...unknown, ...: T... ) → () Runs task.defer with the given function and adds it to the Scope, cancelling it if the Scope unloads while the task is running.  ","version":null,"tagName":"h3"},{"title":"delay​","type":1,"pageTitle":"Scope","url":"/kit/api/Scope#delay","content":"&lt;/&gt; Scope:delay( seconds: number, fn: (T...) → ...unknown, ...: T... ) → () Runs task.delay with the given delay/function and adds it to the Scope, cancelling it if the Scope unloads while the task is running. ","version":null,"tagName":"h3"},{"title":"Morphers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/morphers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Morphers","url":"/kit/docs/client-objects/morphers#use-cases","content":" Morphers can be used to spawn parts the player can interact with. If the Morpher has only one NewMorph part, the main Morph part will move to that part's position rather than creating clones. You can weld parts to the main Morph part and use this functionality to create complex mechanics such as moving objects in cutscenes.  The Morpher's sounds can be modified by changing them inside each Morpher button's configuration.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Morphers","url":"/kit/docs/client-objects/morphers#configuration","content":" The main Morpher object does not have configurable properties, this list is for the configuration found inside each specific Morpher button.  Name\tDefault Value\tDescriptionCarryObjects\ttrue\tWhen true, morphing parts will carry objects that are on top of them. Timer\t0\tThe duration the Morpher will stay active for, after this time has passed the Morpher will move back to its default position. If set to 0, the timer does not apply and the Morpher will stay active until another Morpher button is activated. TimerDecimalPlaces\t0\tThe amount of decimals that will be shown on the timer. TimerText\t{T}\tThe text that will be displayed on the timer. See this page for more info.  Each Morpher button has two TweenConfigurations, one for activating the Morpher and one for when it deactivates. The time it takes for the Morpher to move (or return to its default spot) can be configured inside these TweenConfigurations. ","version":"Next","tagName":"h2"},{"title":"Pushbox Spawners","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/pushbox-spawners","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Pushbox Spawners","url":"/kit/docs/client-objects/pushbox-spawners#use-cases","content":" Pushbox Spawners can be used to spawn a box that can be pushed around, or to reset a contraption parented inside the Pushbox model. If the PushboxSpawnConfiguration contains a Sound named SpawnSound, it will be played when the Pushbox spawns.  They can be used to respawn physics objects, to provide consistent setups and prevent them getting stuck in impassable positions.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Pushbox Spawners","url":"/kit/docs/client-objects/pushbox-spawners#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0.5\tDelay between being able to respawn the Pushbox group. DontSpawnFirst\ttrue\tWhen true, the Pushbox group will not automatically spawn when the spawner loads. The button must be pressed for it to spawn. ","version":"Next","tagName":"h2"},{"title":"Pushbox Destroyers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/pushbox-destroyers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Pushbox Destroyers","url":"/kit/docs/client-objects/pushbox-destroyers#use-cases","content":" Pushbox Destroyers can be used to destroy Pushboxes or contraptions parented within a Pushbox model, or to prevent a Pushbox from going outside its intended use area.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Pushbox Destroyers","url":"/kit/docs/client-objects/pushbox-destroyers#configuration","content":" Name\tDefault Value\tDescriptionColorSpecific\tfalse\tWhen true, the Pushbox part that touches the Destroyer must match the Destroyer's color for it to be destroyed. DestroyTag\t(empty string)\tWhen set, activating this Destroyer will destroy any Pushbox in the client object folder with the given tag. DestroyWholeModel\tfalse\tWhen true, the entire Pushbox model will be destroyed upon touch. Otherwise, only the part that touched the Destroyer will be destroyed. ","version":"Next","tagName":"h2"},{"title":"One-Way Platforms","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/one-way-platforms","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"One-Way Platforms","url":"/kit/docs/client-objects/one-way-platforms#use-cases","content":" One-Way platforms are useful for making mechanics such as platforms that you can jump through from the bottom, or trapdoors that the player can fall through but not jump back up onto.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"One-Way Platforms","url":"/kit/docs/client-objects/one-way-platforms#configuration","content":" Name\tDefault Value\tDescriptionActivateConnectedParts\ttrue\tWhen true, all other parts welded to the platform will update their state when the main platform does. ActiveTransparency\t0\tThe transparency the platform will use while collidable. InactiveTransparency\t0.5\tThe transparency the platform will use while uncollidable. Offset\tCFrame.new(0, 0, 0)\tOffset applied to the player's checked position when the platform updates. SetActive\ttrue\tWhen true, toggled platforms will have their Activated attribute update when they toggle their state. ","version":"Next","tagName":"h2"},{"title":"Seats","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/seats","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Seats","url":"/kit/docs/client-objects/seats#use-cases","content":" Seats may be used to temporarily weld a player to a part.  Keep in mind that the player might interact oddly with other client objects whilst sitting on a Seat due to being directly welded to it.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Seats","url":"/kit/docs/client-objects/seats#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t1\tThe time it takes the Seat to be mountable again after dismounting. SitOffset\tCFrame.new(0, 0, 0)\tThe offset added to the default sitting position when mounting. ","version":"Next","tagName":"h2"},{"title":"Music Zone Editors","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/music-zone-editors","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#use-cases","content":" Music Zone Editors can change the priority of a Music Zone as well as any properties in the music zone's Sound object. Any changes made to a music zone with this client object will automatically reset back to their default values when respawning.  ","version":"Next","tagName":"h2"},{"title":"Editor Configuration​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#editor-configuration","content":" Name\tDefault Value\tDescriptionCooldown\t1\tTime in seconds to wait before the Music Zone Editor can activate again. OneTimeUse\tfalse\tWhen true, the music zone editor can only be used one time. ZoneName\tFloor1\tThe name of the music zone to edit. For organization purposes, it is highly recommended to have your music zones' names start with the name of your tower.  ","version":"Next","tagName":"h2"},{"title":"Music Configuration​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#music-configuration","content":" The music configuration module can be found inside of the main Configuration object. If a configuration listed here is not present, it will be ignored.  ","version":"Next","tagName":"h2"},{"title":"ZoneDisabled​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#zonedisabled","content":" The music zone will be disabled if this value is set to true.  ","version":"Next","tagName":"h3"},{"title":"ZonePriority​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#zonepriority","content":" The music zone's priority will be set to this value when triggered.  ","version":"Next","tagName":"h3"},{"title":"SoundConfiguration​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#soundconfiguration","content":" This table lists properties that will be applied to the music zone's Sound object when triggered. Example usage:  SoundConfiguration = { PlaybackSpeed = 2, Volume = 1, },   ","version":"Next","tagName":"h3"},{"title":"EffectConfiguration​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#effectconfiguration","content":" This table lists properties that will be applied to any SoundEffects inside the music zone's Sound object when triggered. There should be one table per effect, listed by name. Example usage:  EffectConfiguration = { FlangeSoundEffect = { Depth = 0.75, }, },   ","version":"Next","tagName":"h3"},{"title":"ExtraConfiguration​","type":1,"pageTitle":"Music Zone Editors","url":"/kit/docs/client-objects/music-zone-editors#extraconfiguration","content":" This table holds extra configurations for the music.  KeepTimePosition​  When enabled, the music zone will keep the currently playing song's time position plus the defined Offset. Useful for dynamically changing between songs that have multiple versions.  KeepTimePosition = { Enabled = false, Offset = 0 },  ","version":"Next","tagName":"h3"},{"title":"Vines","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/vines","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Vines","url":"/kit/docs/client-objects/vines#use-cases","content":" Vines are used in gameplay, for example to swing to platforms that are otherwise impossible to reach. They can be combined with fast elevators to make unique momentum jumps. The length of the Vine can be adjusted by editing the length of the constraint.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Vines","url":"/kit/docs/client-objects/vines#configuration","content":" Name\tDefault Value\tDescriptionAllowJumpDismount\ttrue\tDetermines whether the Vine can be dismounted by jumping. KeepMomentum\ttrue\tWhen true, objects will retain their momentum upon grabbing the Vine. RespawnTime\t1\tThe time it takes for the Vine's AttachmentPart to re-appear after the player dismounts it. ","version":"Next","tagName":"h2"},{"title":"Swings","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/swings","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Swings","url":"/kit/docs/client-objects/swings#use-cases","content":" Swings can be used to create complex gameplay sections and jumps. The player swings in a perfectly circular trajectory around the Swing.  The Swing's sounds can be changed by modifying the Sound objects inside the Sounds folder.  ","version":"Next","tagName":"h2"},{"title":"Swing Configuration​","type":1,"pageTitle":"Swings","url":"/kit/docs/client-objects/swings#swing-configuration","content":" Name\tDefault Value\tDescriptionAllowJumpDismount\ttrue\tWhen true, the Swing is able to be dismounted by jumping. Anchor\ttrue\tWhen true, the Swing part will be locked in place below the Top part until the player mounts the Swing. Otherwise, it can move around freely. Recommended to keep as true if you are making moving Swings. BallSocketMode\tfalse\tWhen true, the Swing will use a BallSocketConstraint instead of HingeConstraints. Allows 360-degree movement. Boost\t0\tThe velocity the player will dismount with. If set to 0, they will preserve the velocity they currently have. Otherwise, they will be launched in the direction the Swing part is facing. Cooldown\t1\tTime in seconds to wait before the Swing can be mounted again after dismounting. JumpOff\ttrue\tWhen true, the player will jump when dismounting. Otherwise, they will simply start falling.  ","version":"Next","tagName":"h2"},{"title":"Control Configuration​","type":1,"pageTitle":"Swings","url":"/kit/docs/client-objects/swings#control-configuration","content":" Name\tDefault Value\tDescriptionCanControl\ttrue\tWhen true, the player will be able to control the movement of the Swing. Force\t750\tThe amount of force exerted when the player controls the swing. MaxVelocity\t75\tThe maximum speed the swing can move at while being controlled by the player. ","version":"Next","tagName":"h2"},{"title":"Ziplines","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/ziplines","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Ziplines","url":"/kit/docs/client-objects/ziplines#use-cases","content":" Ziplines can be used to transport players or Pushboxes along a set path. They will always try to keep attached objects upright.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Ziplines","url":"/kit/docs/client-objects/ziplines#configuration","content":" A Zipline's route is determined using De Casteljou's algorithm on all points in the Points folder. These must be named in a numbered sequence (eg. 1, 2, 3). Any other parts in the folder are ignored. All points are automatically welded to the MountPart.  The Zipline's particles and sounds can be adjusted by adding particles to the GuideEffects folder and editing the Sound objects in the Sounds folder. Defaults will be used if these folders are not present.  Please note that any configuration related to player input will also apply when non-player objects are mounted on the Zipline.  Name\tDefault Value\tDescriptionAllowEndDismount\ttrue\tWhen true, the attached object will automatically detach from the Zipline when it reaches the end. AllowJumpDismount\ttrue\tWhen true, jumping will cause the attached object to dismount from the Zipline. AllowUserControl\tfalse\tWhen true, moving forwards or backwards will allow the attached object to move themselves along the Zipline. When changing directions, the attached object will accelerate and deccelerate at 4 studs per second squared up to the maximum speed. GuideColor\t(255, 255, 0)\tThe color of the part that connects the Zipline to the attached object. KeepMomentum\tfalse\tWhether the attached object retains its momentum when dismounted. Note that if a player has negative vertical momentum, it will not be retained because the player performs a jump when dismounting. Loop\tfalse\tWhen true, and AllowEndDismount is false, the Zipline will reset back to the start of the path when it reaches the end. May behave oddly if the start and end of the path are not at the same location. RopeLength\t5\tThe length of the rope formed between the attached object and the guide part. Segments\t20\tThe amount of segments the curve is formed by. Please note that there is a limit of 100 segments in order to reduce lag. Speed\t5\tThe speed the guide part travels at, in studs per second. ","version":"Next","tagName":"h2"},{"title":"TouchConfiguration","type":0,"sectionRef":"#","url":"/kit/docs/global-configurations/touch-configurations","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"TouchConfiguration","url":"/kit/docs/global-configurations/touch-configurations#configuration","content":" Name\tDefault Value\tDescriptionplayer\ttrue\tWhen true, the client object can be interacted with by the player. pushbox\ttrue\tWhen true, the client object can be interacted with by Pushboxes. turret\tfalse\tWhen true, the client object can be interacted with by Turret bullets. balloon\tfalse\tWhen true, the client object can be interacted with by Balloons. colorSpecific\tfalse\tWhen true, the part that interacted with the client object must match the color of the client object to be able to interact with it. This does not affect players. canFlip\tfalse\tWhen true, the client object can be interacted with using Corner Flips. ","version":"Next","tagName":"h2"},{"title":"Trip Parts","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/trip-parts","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Trip Parts","url":"/kit/docs/client-objects/trip-parts#use-cases","content":" Trip Parts can be used to make the player forcefully sit down, useful when making things such as slides. Under specific setups, Trip Parts can be used to do high jumps without needing the player to hug a wall.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Trip Parts","url":"/kit/docs/client-objects/trip-parts#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t1\tDelay between being able to use the Trip Part again. StunDuration\t0\tIf above 0, the player will be stunned entirely for a set duration instead of only sitting down. ","version":"Next","tagName":"h2"},{"title":"Lighting Changers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/lighting-changers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Lighting Changers","url":"/kit/docs/client-objects/lighting-changers#use-cases","content":" Lighting Changers are used for cinematic effects and help bring together the mood of towers. For example, dark lighting can create a gloomy feel. In contrast, bright and vibrant lighting can heighten intense or upbeat sections of towers.  ","version":"Next","tagName":"h2"},{"title":"Lighting Module​","type":1,"pageTitle":"Lighting Changers","url":"/kit/docs/client-objects/lighting-changers#lighting-module","content":" Lighting Changers are configured inside of a Lighting ModuleScript that is found inside theLightingChangerConfiguration object. This module contains a list of lighting objects to change, as well as their properties. You can define either a single object to change or multiple objects to change at once.  Example usage, changing only a single object:  return Change &quot;Lighting&quot; { TweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), Configuration = { ClockTime = 0, }, }   Example usage, changing multiple lighting objects at once:  return { TweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), Change &quot;Lighting&quot; { Configuration = { ClockTime = 0, }, }, Change &quot;ColorCorrectionEffect&quot; { Configuration = { TintColor = Color3.fromRGB(255, 0, 0), }, }, }   ","version":"Next","tagName":"h2"},{"title":"Lighting Presets​","type":1,"pageTitle":"Lighting Changers","url":"/kit/docs/client-objects/lighting-changers#lighting-presets","content":" Lighting presets can be used to better organize different sets of lighting. You can create a lighting preset by using SetDefault as a string parameter in a lighting changer's configuration module. These can then be reused by using UseDefaultas a string parameter with the same value.  PlaceDefault and TowerDefault are special presets that refer to the default lighting of either the place or the tower.  ","version":"Next","tagName":"h3"},{"title":"Supported Lighting Objects​","type":1,"pageTitle":"Lighting Changers","url":"/kit/docs/client-objects/lighting-changers#supported-lighting-objects","content":" The following lighting object names, which correspond to actual instances under the Lighting service, can be specified as the object to change:  Name\tConfigurable Properties\tAdditional NotesLighting\tAmbient, Brightness, ClockTime, ColorShift_Bottom, ColorShift_Top, EnvironmentDiffuseScale, EnvironmentSpecularScale, ExposureCompensation, FogColor, FogEnd, FogStart, GeographicLatitude, GlobalShadows, OutdoorAmbient, ShadowSoftness, TimeOfDay\tWhen an Atmosphere object is used, fog will automatically be disabled and have no effect. Atmosphere\tEnabled, Density, Offset, Color, Decay, Glare, Haze\tBecause Atmosphere objects do not have an Enabled property, it instead toggles whether the Atmosphere effect is parented to Lighting. BlurEffect\tSize. BloomEffect\tIntensity, Size, Threshold. ColorCorrectionEffect\tBrightness, Contrast, Saturation, TintColor. DepthOfFieldEffect\tFarIntensity, FocusDistance, InFocusRadius, NearIntensity. Sky\tMoonAngularSize, MoonTextureId, SkyboxBk, SkyboxDn, SkyboxFt, SkyboxLf, SkyboxRt, SkyboxUp, StarCount, SunAngularSize, SunTextureId, SkyboxOrientation.\t  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Lighting Changers","url":"/kit/docs/client-objects/lighting-changers#properties","content":" The lighting configuration contains a table that is used to specify the properties that can be changed for a given lighting object.  Name\tDescriptionConfiguration\tA table of new properties for the lighting object, OR a reference to an instance of the lighting object to copy it's properties. SetDefault\tSets the default properties for the given lighting preset. UseDefault\tUses the default properties from the given lighting preset. TweenInfo\tThe TweenInfo object used to transition the properties of the lighting object. ","version":"Next","tagName":"h3"},{"title":"Teleporters","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/teleporters","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Teleporters","url":"/kit/docs/client-objects/teleporters#use-cases","content":" Teleporters can be used to move players and parts to a designated position.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Teleporters","url":"/kit/docs/client-objects/teleporters#configuration","content":" Name\tDefault Value\tDescriptionDisableCollision\tfalse\tOnly applies to players. If true, the player will not activate objects they interact with while teleporting. Instant\ttrue\tIf true, the teleported object will be instantly moved to the destination. Otherwise, they will move to the destination using the provided TweenConfiguration. KeepVelocity\ttrue\tIf true, the teleported object will retain its previous velocity when teleporting. Otherwise, it will be reset to 0. Offset\tCFrame.new(0, 4, 0)\tWhen being teleported, the location the teleported object will teleport to will be offset by this value. SeamlessTeleport\tfalse\tIf true, the teleported object will be moved and rotated so that it ends up in the same position and orientation relative to the destination as it was relative to the teleporter. Additionally, if a character is being teleported, the player's camera will be oriented relative to the player's new world orientation. Overrides Offset. ","version":"Next","tagName":"h2"},{"title":"Turrets","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/turrets","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Turrets","url":"/kit/docs/client-objects/turrets#use-cases","content":" Turrets can be used to shoot projectiles the player has to avoid, or to shoot out other objects such as platforms or other client objects.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Turrets","url":"/kit/docs/client-objects/turrets#configuration","content":" Name\tDefault Value\tDescriptionActivatorCooldown\t1\tWhen using Activator parts, the time between being able to use them again. Damage\t5\tHow much damage the bullet will deal upon impact with the player. Note that only parts named &quot;Bullet&quot; will deal damage. DestroyOnTouch\ttrue\tWhen true, the bullet will be destroyed upon impact. If you are making the turret shoot out anything the player should be able to interact with, this should be set to false. FireRate\t1\tThe amount of bullets that will be shot per second. MaxLifetime\t5\tThe maximum amount of time in seconds that bullets should exist for. Bullets will automatically despawn after this time if they haven't already been destroyed. Range\t50\tThe turret's maximum activation range, measured in studs. If the player is further away than this value, the turret will not fire. Speed\t50\tThe speed that fired bullets will move at, measured in studs per second.  ","version":"Next","tagName":"h2"},{"title":"Activator Parts​","type":1,"pageTitle":"Turrets","url":"/kit/docs/client-objects/turrets#activator-parts","content":" The Turret model contains a folder named Activators. Any part inside this folder will make the turret fire a bullet when touched. This can be used in combination with a FireRate of 0 to make turrets that only activate upon touch.  ","version":"Next","tagName":"h2"},{"title":"Additional notes​","type":1,"pageTitle":"Turrets","url":"/kit/docs/client-objects/turrets#additional-notes","content":" When making complex bullets (e.g. firing other client objects), you should keep in mind that the &quot;main&quot; part of the bullet will be automatically positioned at the turret's position and rotation when firing, moving all other parts welded to it as well. The main part is determined by going through these steps and picking the first one that applies:  The bullet model's PrimaryPartA part inside the bullet model named &quot;Bullet&quot;If neither of these apply, a default bullet will be used as a failsafe. ","version":"Next","tagName":"h2"},{"title":"TweenConfiguration","type":0,"sectionRef":"#","url":"/kit/docs/global-configurations/tween-configurations","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"TweenConfiguration","url":"/kit/docs/global-configurations/tween-configurations#configuration","content":" Name\tDefault Value\tDescriptionTime\t1\tThe duration of the tween. Style\tEnum.EasingStyle.Quad\tThe EasingStyle of the tween. Direction\tEnum.EasingDirection.Out\tThe EasingDirection of the tween. ","version":"Next","tagName":"h2"},{"title":"Vanishers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/vanishers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Vanishers","url":"/kit/docs/client-objects/vanishers#use-cases","content":" Vanishers can be used to create varying types of gameplay, puzzles, or contraptions. An example of this is to speed up pacing for a section by requiring the player to move fast.  All Vanisher parts in the VanisherGroup model will be activated when any part in the model is touched.  ","version":"Next","tagName":"h2"},{"title":"Vanish modes​","type":1,"pageTitle":"Vanishers","url":"/kit/docs/client-objects/vanishers#vanish-modes","content":" Each VanishMode has unique logic.  Mode\tDescriptionFade\tSmoothly fades. Blink\tFlashes multiple times before vanishing. Constant\tGradually fades depending on contact. If not in contact, regenerates. Shrink\tShrinks the part away in a set direction (Top, Bottom, Left, Right, Front, Back, Center). Does not support trusses and may behave oddly with spheres.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Vanishers","url":"/kit/docs/client-objects/vanishers#configuration","content":" Name\tDefault Value\tDescriptionBlinkCount\t3\tAmount of blinks in Blink mode. ConstantNoRecovery\tfalse\tPrevents recovery in Constant mode when not in contact. Invert\tfalse\tReverses behavior: visible becomes invisible and vice versa. RespawnFade\tfalse\tWhether the part fades in when respawning. RespawnTime\t2\tSeconds before the part reappears. ShrinkDirection\tCenter\tDirection of shrinking in Shrink mode. VanishMode\tFade\tVanish behavior.  If you add the Invisible tag to a Vanisher part, it will ignore all collision and transparency updates. This can be used for detail such as having one big selection box around a set of trusses. ","version":"Next","tagName":"h2"},{"title":"ClientObjects","type":0,"sectionRef":"#","url":"/kit/api/ClientObjects","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#functions","content":" ","version":null,"tagName":"h2"},{"title":"isButtonActivatedPlatform​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#isButtonActivatedPlatform","content":"shorthand &lt;/&gt; ClientObjects.isButtonActivatedPlatform(platform: Instance) → boolean This function is used to check if the provided Instance is a ButtonActivatedPlatform. This will return true if it is a BasePart and meets one of the following requirements: Is named ButtonActivatedPlatform Has a tag named ButtonActivated  ","version":null,"tagName":"h3"},{"title":"isBalloon​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#isBalloon","content":"shorthand &lt;/&gt; ClientObjects.isBalloon( parent: Instance, doNotCheckAncestor: boolean? ) → boolean This function is used to check if the provided Instance is part of a dispensed Balloon. This will return true if it meets one of the following requirements: Is named BalloonModel If doNotCheckAncestor is not true and the Instance has an ancestor named BalloonModel   ","version":null,"tagName":"h3"},{"title":"isTurret​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#isTurret","content":"shorthand &lt;/&gt; ClientObjects.isTurret( parent: Instance, doNotCheckAncestor: boolean? ) → boolean This function is used to check if the provided Instance is part of a Turret's bullet. This will return true if it meets one of the following requirements: Is named Bullet If doNotCheckAncestor is not true and the Instance has an ancestor named Bullet   ","version":null,"tagName":"h3"},{"title":"isPushbox​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#isPushbox","content":"shorthand &lt;/&gt; ClientObjects.isPushbox( parent: Instance, doNotCheckAncestor: boolean? ) → boolean This function is used to check if the provided Instance is part of a Pushbox. This will return true if it meets one of the following requirements: Is named Pushbox Has a tag named IsBox If doNotCheckAncestor is not true and the Instance has an ancestor named Pushbox   ","version":null,"tagName":"h3"},{"title":"validatePlayerToucher​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#validatePlayerToucher","content":"&lt;/&gt; ClientObjects.validatePlayerToucher( toucher: BasePart , mode: Character.HitboxModes? ) → boolean This function checks if the given toucher is part of the character's hitbox mode provided.  ","version":null,"tagName":"h3"},{"title":"evaluateToucher​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#evaluateToucher","content":"&lt;/&gt; ClientObjects.evaluateToucher( part: BasePart , toucher: BasePart , config: (Instance | typeof(Config.TOUCH_CONFIG))? ) → boolean This function checks if two BaseParts (part and toucher) touching is considered valid or not, based on the provided config. See this page for more info.  ","version":null,"tagName":"h3"},{"title":"bindToFlip​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#bindToFlip","content":"&lt;/&gt; ClientObjects.bindToFlip( part: BasePart , callback: (rootPart: BasePart ) → () ) → () → () Binds the callback function to the part, executing the callback when the player performs a corner flip on it.  ","version":null,"tagName":"h3"},{"title":"formatTimerText​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#formatTimerText","content":"&lt;/&gt; ClientObjects.formatTimerText( text: string, decimalPlaces: number, timeRemaining: number ) → string Function to format timer labels in a standardized manner, used in Buttons and Morphers. Below are special codes that are replaced within the string automatically. Code Replaced with: {T} The time left on the timer, modified with TimerDecimalPlaces {M} The minutes left on the timer {S} The seconds left on the timer {MS} The milliseconds left on the timer {SM} Used for grammatical reasons. When the amount of minutes left is equal to one, this will display the letter &quot;s&quot;, otherwise this will display nothing. e.g. &quot;minute{SM}&quot; will either display &quot;minutes&quot; or &quot;minute&quot;. {SS} Used for grammatical reasons. When the amount of seconds left is equal to one, this will display the letter &quot;s&quot;, otherwise this will display nothing. e.g. &quot;second{SM}&quot; will either display &quot;seconds&quot; or &quot;second&quot;. {Pn} The player's username {pn} The username in all lowercase {PN} The username in all UPPERCASE {Dn} The player's Display Name {dn} The Display Name in all lowercase {DN} The Display Name in all UPPERCASE {UID} The player's User ID   ","version":null,"tagName":"h3"},{"title":"isInstanceActive​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#isInstanceActive","content":"&lt;/&gt; ClientObjects.isInstanceActive( scope: Scope, instance: Instance, ignoreList: {[string]: boolean}? ) → boolean Returns whether the provided Instance is active or not.  ","version":null,"tagName":"h3"},{"title":"listenInstanceActive​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#listenInstanceActive","content":"&lt;/&gt; ClientObjects.listenInstanceActive( scope: Scope, instance: Instance, ignoreList: {[string]: boolean}?, callback: (active: boolean) → () ) → () → () Listens to the Instance's activeness, executing the callback when it's activeness changes.  ","version":null,"tagName":"h3"},{"title":"setInstanceActive​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#setInstanceActive","content":"&lt;/&gt; ClientObjects.setInstanceActive( scope: Scope, instance: Instance, key: string, active: boolean ) → () Sets the Instance's activeness based on active. Instances can have multiple activeness states, dictated by the key parameter.  ","version":null,"tagName":"h3"},{"title":"scanFolder​","type":1,"pageTitle":"ClientObjects","url":"/kit/api/ClientObjects#scanFolder","content":"&lt;/&gt; ClientObjects.scanFolder( targetScope: Scope, path: Instance, targetPath: Instance? ) → () Scans the given folder and loads any client objects within into the given scope. Used for client objects that can spawn other client objects, such as Pushboxes. ","version":null,"tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/kit/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation Instructions​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#installation-instructions","content":" The kit is distributed using a pre-made place, making it simple and straight-forward to get started. It can be obtained by:  Opening the uncopylocked template place on Roblox (recommended)Downloading the .rbxl file from our GitHub releases page  ","version":"Next","tagName":"h2"},{"title":"Update Instructions​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#update-instructions","content":" If you are using a previous version of a kit, then you can update it to the latest version by going to our GitHub releases page and finding the update kit associated with the latest release. Instructions are included in the release and inside of the update kits.  Please note that there is currently no update kit from V5.5 to V6, this will be worked on soon.  ","version":"Next","tagName":"h2"},{"title":"Website Navigation​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#website-navigation","content":" The website can be navigated by using the navigation bars on the top side and left side of the site. The top bar is used to switch between different sections of the website, and the left bar is used to navigate through categories within these sections.  ","version":"Next","tagName":"h2"},{"title":"Documentation​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#documentation","content":" Detailed documentation for each Client Object in the kit can be found in the Client Objects category. These pages will contain a list of possible configurations for the Client Object, as well as additional info such as a description of the object and potential use cases.  ","version":"Next","tagName":"h2"},{"title":"Global Configuration Documentation​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#global-configuration-documentation","content":" The Global Configurations category contains documentation for special configuration sets that nearly all Client Objects in the kit have. These are listed seperately for convenience.  ","version":"Next","tagName":"h3"},{"title":"API Documentation​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#api-documentation","content":" Documentation for the kit's scripts can be found in the API section found in the top bar. These are meant to assist people that are working on custom scripts for the kit.  See the docs on writing repository scripts for more information. Please note that you are not allowed to use custom scripts unless you have the Verified Builder role or are in a collaboration with someone who has the role.  ","version":"Next","tagName":"h3"},{"title":"What's different compared to Version 5?​","type":1,"pageTitle":"Introduction","url":"/kit/docs/intro#whats-different-compared-to-version-5","content":" If you are experienced with building towers using an old kit, please read through the changelog as it contains important information. A guide on converting towers made using v5.5 to v6 will be written at a later date. ","version":"Next","tagName":"h2"},{"title":"Sequencers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/sequencers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#use-cases","content":" Sequencers are used as the replacement for Pushbox contraptions that were widely used in older kits, and have several benefits such as them being much more consistent due to not being prone to physics issues.  ","version":"Next","tagName":"h2"},{"title":"Using Sequencers​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#using-sequencers","content":" Objects activated by Sequencers must be placed in the Sequencer's Sequence folder. When activated, the Sequencer will begin moving in the direction it is facing. Objects in the sequence will be activated when the Sequencer passes through the center point of the object. When placing these objects in the Sequence folder, please make sure to do the following (if applicable):  Set all of the object's Transparency to 0.Set all of the object's CanCollide &amp; CanTouch to false.Disable all TouchConfigurations.  This is to make sure that nothing unwanted or unpredictable happens, and to prevent any sorts of lag.  If a reached object has a YieldSequence tag, the Sequencer will pause until that object's function finishes running. In the case of button platforms, it will pause until the button platform activates. If a part named EndPoint is reached in the sequence, the Sequencer will stop running early. This can be used for debugging purposes.  For performance reasons, Sequencers will not run when the game is running below 10FPS. A warning message will also be displayed if the Sequencer is looping at an obscene rate (20+ times per second)  ","version":"Next","tagName":"h2"},{"title":"Sequence Groups​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#sequence-groups","content":" A SequenceGroup template can be found in the Extra Sequencer Stuff folder in the kit. If you parent objects into this group, they will have special behavior based on the GroupConfiguration's Mode when activated in a sequence:  Random will simply select and activate a random object from the group.And and Or are conditional modes that rely on Property Checkers. The Sequencer will activate all Property Checkers in the group and cancel the sequence if their conditions are not met. If using And, all conditions have to be met, and if using Or, only one condition has to be met.  ","version":"Next","tagName":"h3"},{"title":"Sequence Pointers​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#sequence-pointers","content":" Sequence Pointers can also be found in the Extra Sequencer Stuff folder. When activated in a sequence, the Sequencer will search for any objects with Tags matching its Pointer attribute, and activate those objects.  Sequence Variables are also supported, by making the sequence pointer's Pointer attribute a sequence variable wrapped around in curly braces.  ","version":"Next","tagName":"h3"},{"title":"Sequence Variables​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#sequence-variables","content":" Every Activator part has a SequenceVariables Configuration object. Any attributes you add to this object can be read by Property Changers.  ","version":"Next","tagName":"h3"},{"title":"Sequencer Support​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#sequencer-support","content":" The following objects are currently supported by Sequencers:  Object\tNotesAttachers Balloons Boosters Boost Removers Buttons Button Deactivators Dismounters Emitters\tUse with Sequence Pointers GUI Displayers Lighting Changers Morphers Music Zone Editors Property Changers Pushbox Spawners Pushbox Destroyers Seats\tUse with Sequence Pointers Swings\tUse with Sequence Pointers Teleporters\tSeamless mode will not function correctly. Trip Parts Turrets\tUse with Sequence Pointers Vanishers\tUse with Sequence Pointers Vines\tUse with Sequence Pointers Ziplines\tUse with Sequence Pointers  ","version":"Next","tagName":"h2"},{"title":"Music Sync​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#music-sync","content":" Sequencers can be synced to the tower's music. This will adjust the speed of the Sequencer to match the BPM of the currently playing song. See the documentation on music sync for more information.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Sequencers","url":"/kit/docs/client-objects/sequencers#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0\tThe amount of time it will take for the Sequencer to be usable again after it finishes. LoopAmount\t0\tThe amount of times the Sequencer will run when activated. If set to 0, it will only run once. If set to any negative number, it will keep running forever. LoopDelay\t0\tThe amount of time the Sequencer will wait before reactivating after every loop. RunAtStart\tfalse\tWhen true, the Sequencer will automatically run when it loads, without it having to be activated by touch. Speed\t1\tThe speed the Sequencer will move at, in studs per second. Visualize\ttrue\tWhen true, the Sequencer will move to show its progress, and color itself to show its current state. Useful for debugging sequences. ","version":"Next","tagName":"h2"},{"title":"Lighting","type":0,"sectionRef":"#","url":"/kit/api/Lighting","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#functions","content":" ","version":null,"tagName":"h2"},{"title":"takeDamage​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#takeDamage","content":"&lt;/&gt; Lighting.takeDamage(damage: BasePart | number | string) → () See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"validateDamageBrick​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#validateDamageBrick","content":"&lt;/&gt; Lighting.validateDamageBrick(brick: BasePart ) → (string | number)? See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"getHumanoid​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#getHumanoid","content":"&lt;/&gt; Lighting.getHumanoid() → Humanoid?  See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"startBoost​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#startBoost","content":"&lt;/&gt; Lighting.startBoost(boostData: CharacterManager_Types.BoostData) → () See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"updateBoost​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#updateBoost","content":"&lt;/&gt; Lighting.updateBoost( boostData: CharacterManager_Types.BoostData, boostEnded: boolean? ) → () See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"removeBoost​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#removeBoost","content":"&lt;/&gt; Lighting.removeBoost(boostData: CharacterManager_Types.BoostData) → () See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"getActiveBoosts​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#getActiveBoosts","content":"&lt;/&gt; Lighting.getActiveBoosts() → {CharacterManager_Types.BoostData} See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"getActiveBoost​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#getActiveBoost","content":"&lt;/&gt; Lighting.getActiveBoost( boostType: string, isPad: boolean? ) → CharacterManager_Types.BoostData? See CharacterManager for more info.  ","version":null,"tagName":"h3"},{"title":"changeLighting​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#changeLighting","content":"&lt;/&gt; Lighting.changeLighting( config: LightingManager_Types.LightingConfiguration, scope: Scope? ) → () Changes the active lighting based on the given config. See LightingManager for more info.  ","version":null,"tagName":"h3"},{"title":"resetLighting​","type":1,"pageTitle":"Lighting","url":"/kit/api/Lighting#resetLighting","content":"&lt;/&gt; Lighting.resetLighting() → () Resets all lighting properties back to their default state. ","version":null,"tagName":"h3"},{"title":"Property Changers","type":0,"sectionRef":"#","url":"/kit/docs/client-objects/property-changers","content":"","keywords":"","version":"Next"},{"title":"Use Cases​","type":1,"pageTitle":"Property Changers","url":"/kit/docs/client-objects/property-changers#use-cases","content":" Property Changers can be used to change properties of objects. They can be used in combination with Sequencers in order to make complex contraptions and sequences.  ","version":"Next","tagName":"h2"},{"title":"Using Property Changers​","type":1,"pageTitle":"Property Changers","url":"/kit/docs/client-objects/property-changers#using-property-changers","content":" The Property Changer's Properties module can be found inside the PropertyChangerConfiguration object. This module contains all of the data of the Property Changer.  Do not tamper with the lines placed at the top of the script or write non-intended custom code in functions. There are restrictions in place in order to prevent doing things that aren't allowed, and doing this will make your tower ineligible for submission according to the Custom Client Objects rule.  The table contains a list of properties to change, as well as a Instance field that is required for the Property Changer to function. For example, the default properties look like this:  local Properties: _C.Format = { { Instance = Toucher(), Tween = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), Color = function(_E) return _E.Changer():Property(&quot;Color&quot;) end, }, }   This will change the Color of any part that touches the Property Changer to the color of the changer.  The Bullet Velocity Changer (a pre-made PropertyChanger) found in the kit has fields that look like this:  Instance = Toucher():FindChildOfClass(&quot;LinearVelocity&quot;), Tween = TweenInfo.new(0.25, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), VectorVelocity = function(_E) return _E.Changer():Property(&quot;CFrame&quot;).LookVector * _E.Changer():FindChild(&quot;PropertyChangerConfiguration&quot;):Property(&quot;Speed&quot;) end,   This will search for the LinearVelocity inside the touching object and set its VectorVelocity to the changer's facing direction multiplied by the Speed attribute in the PropertyChangerConfiguration. More information on these functions can be found below.  The Instance field defines what objects will be affected by the Property Changer.If present, the Tween field will tween these properties. Note that tweens may be laggy if you are affecting a large amount of objects at once.If present, the Condition function will make the Property Changer not run if the condition is not met. Read the documentation on property checkers for more info.  Every other field defines properties of the object to change. You can either directly define values or use a function to calculate the value or retrieve the value from another object. More info can be found below.  ","version":"Next","tagName":"h2"},{"title":"Instance Field​","type":1,"pageTitle":"Property Changers","url":"/kit/docs/client-objects/property-changers#instance-field","content":" There are multiple ways to retrieve the set of objects to affect: Toucher, Tagged, TagFromSequenceVariable, and Changer.  Toucher will affect the part that touched the Property Changer. An example of this is in the default properties shown earlier.  Tagged will look through all Client Objects and affect any objects that have the given Tag. Example usage:  -- This will affect any object in the Client Object folder that has the tag &quot;MyCoolPart&quot; Instance = Tagged(&quot;MyCoolPart&quot;),   TagFromSequenceVariable is similar to Tagged, but the given value is treated as a Sequence Variable instead.  Changer will simply affect the Property Changer itself.  More functions (:FindChild(), :FindDescendant(), :FindChildOfClass(), :FindDescendantOfClass(), :FindAncestor(), :FindAncestorOfClass(), :Parent()) can be appended to these to instead affect the object's parent or children. An example of this is shown in the Bullet Velocity Changer snippet above, with the function grabbing the LinearVelocity inside the bullet.  ","version":"Next","tagName":"h3"},{"title":"Built-In Functions​","type":1,"pageTitle":"Property Changers","url":"/kit/docs/client-objects/property-changers#built-in-functions","content":" The Property Changer has built-in functions that allow you to retrieve values from other objects. These are listed below.  _E.Value()​  This function lets you retrieve certain values for usage in the Property Changer. The list of retrievable values is as follows:  Value\tDescription\tExample UsagePlayerName\tThe player's username\t_E.Value(&quot;PlayerName&quot;) PlayerDisplayName\tThe player's display name\t_E.Value(&quot;PlayerDisplayName&quot;) UserId\tThe player's user ID\t_E.Value(&quot;UserId&quot;) Distance\tThe distance between the player's character and the given position\t_E.Value(&quot;Distance&quot;, Vector3.zero) CharacterPosition\tThe position of the player's character\t_E.Value(&quot;CharacterPosition&quot;) CharacterCFrame\tThe CFrame of the player's character\t_E.Value(&quot;CharacterCFrame&quot;) PlayerHealth\tThe player's health\t_E.Value(&quot;Health&quot;) CameraCFrame\tThe camera's CFrame\t_E.Value(&quot;CameraCFrame&quot;) HumanoidState\tThe player's HumanoidStateType\t_E.Value(&quot;HumanoidState&quot;) FormatTimer\tFormats the given timer value with the string. See: the documentation on formatTimerText\t_E.Value(&quot;FormatTimer&quot;, &quot;{M}:{S}:{MS}&quot;, 1, 120) SequenceVariable\tThis function lets you retrieve the Sequence Variable with the given name.\t_E.Value(&quot;SequenceVariable&quot;, &quot;MyAwesomeVariable&quot;) MoveVector\tThe player's movement vector\t_E.Value(&quot;MoveVector&quot;) IsShiftLocked\tWhether the player has shift lock active. An extra true argument can be used to include first-person mode in this check as well.\t_E.Value(&quot;MoveVector&quot;) IsJumping\tWhether the player is currently jumping.\t_E.Value(&quot;IsJumping&quot;)  _E.Changer()​  This function lets you retrieve any property from the Property Changer itself. This example will change the Color of any touching Part to the Color of the changer itself:  Color = function(_E) return _E.Changer():Property(&quot;Color&quot;) end,   _E.Instance()​  This function lets you retrieve any property from the object you are affecting. This example will change the Transparency of any affected Part based on how far away you are from it, with a radius of 30 studs:  Transparency = function(_E) return _E.Value(&quot;Distance&quot;, _E.Instance():Property(&quot;Position&quot;)) / 30 end,   _E.Tagged()​  This function lets you retrieve any property from an object with the given Tag. This example will retrieve the Color of an object that has the tag MyCoolPart:  Note that this function only retrieves one object from the tag.  Color = function(_E) return _E.Tagged(&quot;MyCoolPart&quot;):Property(&quot;Color&quot;) end,   _E.SequenceInstance()​  This function lets you retrieve any property from an object provided by a Sequencer.  Sequencers provide two values:  TouchingPart - The Part that touched the sequencer's activatorActivatingPart - The Activator part that activated the sequencer  This example will retrieve the Color of the sequence instance ActivatingPart:  Color = function(_E) return _E.SequenceInstance(&quot;ActivatingPart&quot;):Property(&quot;Color&quot;) end,   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Property Changers","url":"/kit/docs/client-objects/property-changers#configuration","content":" Name\tDefault Value\tDescriptionCooldown\t0.5\tDelay between being able to activate the Property Changer again.  ","version":"Next","tagName":"h2"},{"title":"Property Checkers​","type":1,"pageTitle":"Property Changers","url":"/kit/docs/client-objects/property-changers#property-checkers","content":" Property Checkers are a special type of Property Changer. If the Condition function is present, the Property Changer will not run if the condition is not met. This example will make the Property Changer only work if you are within 50 studs of it:  local Properties: _C.CheckerFormat = { { Instance = Changer(), Condition = function(_E) return _E.Value(&quot;Distance&quot;, _E.Instance():Property(&quot;Position&quot;)) &lt; 50 end, }, }   If the Property Checker has the ConditionalEnabled configuration and is used in a Sequencer, its sequence will automatically stop if the condition is not met. Alternatively, you could enable the ConditionalYieldSequence to make the sequencer yield until the condition is met, or enable ConditionalBreakSequence to completely stop the sequencer and its loop from running.  Property Checkers also have the ability to yield a sequence until an event is activated, such as a ProximityPrompt trigger, shown in the code example below.  local Properties: _C.CheckerFormat = { { Instance = Tagged(&quot;MyProximityPrompt&quot;), Event = function(_E) return _E.Instance():Event(&quot;Triggered&quot;) end, }, }  ","version":"Next","tagName":"h2"},{"title":"Miscellaneous","type":0,"sectionRef":"#","url":"/kit/docs/misc","content":"","keywords":"","version":"Next"},{"title":"Kit Settings​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#kit-settings","content":" There is a KitSettings module found in ReplicatedStorage that allows you to toggle global kit settings. These settings will alter how the kit functions in your place.  Name\tDefault Value\tDescriptionResetOnDeath\ttrue\tWhen true, all client objects will reload when you die and respawn. This mimics how your tower will behave when placed ingame and can be useful for bugtesting. DisplaySettingsGui\ttrue\tWhen true, you will have access to a settings menu that allows you to quickly rejoin the game and change settings such as your corner flip keybind. DisplayDebugGuis\tfalse\tWhen true, the kit will display a debug menu that shows stats about your play session, such as FPS, RAM usage, the amount of instances, etc. DisplayMemoryDebug\tfalse\tWhen true, the kit will display a debug menu that shows an overview of the RAM usage in your place and what is using it. Useful for optimization.  ","version":"Next","tagName":"h2"},{"title":"Object Tags​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#object-tags","content":" In Kit v6, value objects are no longer used in favor of Configuration objects for settings, and Tags for object flags. Below is a table of all usable tags.  ","version":"Next","tagName":"h2"},{"title":"General​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#general","content":" Name\tDescriptionInvisible, AltInvisible\tMakes parts invisible if present. Invisible will use Transparency while AltInvisible will use LocalTransparencyModifier. CanFlip\tIf present, the player will be able to perform Corner Flips on the part. DoNotFlipPlayer\tIf present alongside the CanFlip tag, performing a Corner Flip on a Part will not move/rotate the player. Useful for flip-activated client objects. OnlyInStudio\tIf present, the object will only be visible in Studio and will automatically be deleted when playing the tower.  ","version":"Next","tagName":"h2"},{"title":"Client Object Specific​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#client-object-specific","content":" Name\tDescriptionButtonActivated\tIf present, the client object will become inactive until activated by a Button. SkipObjectLoad\tIf present inside a client object, it will not be automatically loaded when the tower loads. Required for client objects that have the capability of spawning other client objects, such as Pushboxes or Turrets  ","version":"Next","tagName":"h2"},{"title":"Hitbox Modes​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#hitbox-modes","content":" Certain client objects have a HitboxMode configuration attribute that lets you control what parts of the player are allowed to trigger a touch on that object. These hitboxes ignore animations and as such should be more consistent. A list is provided below.  Name\tDescriptionRootPart\tHumanoidRootPart only StaticWholeBody\tCharacter's entire body StaticCenter\tCharacter's entire body, excluding arms StaticArms\tArms &amp; torso only  There are more hitbox types that include the character's actual limbs, note that these do not ignore animations:  Name\tDescriptionWholeBody\tAll limbs Center\tAll limbs, excluding the arms  ","version":"Next","tagName":"h2"},{"title":"Music Sync Configuration​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#music-sync-configuration","content":" Certain client objects have a MusicSyncConfiguration inside their main Configuration object. This can be used to make them music synced. They contain a SyncEnabled attribute and a ZoneName attribute which specifies whether to use music sync, and the music zone to sync to.  It also contains a Sync module where the actual sync is defined, an example of it looks like this:  return { TimingOffset = 000.000, -- Change this to sync your song BeatsPerMinute = { -- Example: { beat = 016.000, bpm = 180.000 }, { beat = 000.000, bpm = 130.000 }, }, Stops = { -- Example stop: { beat = 002.000, seconds = 000.500 }, -- Stops the music at beat 2 for 0.5 seconds }, }   TimingOffset is the timestamp in seconds that defines the start of the song. Use this if your song doesn't directly start as soon as the sound plays.  BeatsPerMinute is a table that defines the BPM for certain timestamps of the song, measured in beats. The BPM set in beat 0 defines the BPM of the start of the song.  Stops is a table that defines pauses in the song. The timestamp of where to stop is measured in beats, and the amount of time to pause for is measured in seconds.  ","version":"Next","tagName":"h2"},{"title":"Writing/Editing Repository Scripts​","type":1,"pageTitle":"Miscellaneous","url":"/kit/docs/misc#writingediting-repository-scripts","content":" NOTE: Keep in mind that custom scripts are not allowed unless you have the Verified Builder role or are in a collaboration with someone who has the role.  When writing custom Client Object repository scripts, PLEASE keep the following things in mind as not following them can and will lead to many issues ingame:  Do not edit existing scripts under any circumstance. These changes will not carry over ingame and will break your tower. If you want to make slight behavioral edits, copy the script instead, parent it into the ExternalRepositories.TowerKit folder in ReplicatedStorage, and give it a new name, preferably with your tower's name in it for organization purposes. This ExternalRepositories.TowerKit folder must be provided in your tower model upon submission.Make sure to put any events or connections you create into a Scope, so that they will automatically be cleaned up when the tower unloads.Make sure to optimize your code as much as you can in order to reduce potential lag issues.Read the API Documentation carefully as these contain many functions to speed up the process of writing repository scripts.Read the existing scripts to get a general idea of how your code should be written. Try to maintain a similar style to make your tower easier to bugfix should it get ingame.  Repository Script Template --!strict --!optimize 2 --@version template-6.0.0 --@creator you local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local _T = require(ReplicatedStorage.Framework.ClientTypes) local Module = { -- Determines whether or not the script can be used by client objects CanQueue = true, -- Determines whether or not the script will be loaded upon entering -- (the script will be loaded without an instance attacted to the scope, -- remove the lines that use the &quot;objectConfig&quot; variables if you use this) RunOnStart = false, } -- This function only runs once, and can be used to set up stuff -- (e.g. config templates) function Module.Init(utility: _T.Utility) -- init code here end function Module.Run(scope: _T.Scope, utility: _T.Utility) local objectConfig = scope.instance if not objectConfig or not objectConfig.Parent then return end -- Your client object code goes here end return Module  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}